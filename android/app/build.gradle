plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.myapp'
    compileSdk 34

    buildFeatures {
        buildConfig true
    }

    // ✅ 支持外部传入 versionCode 和 versionName
    def versionCodeProp = project.hasProperty("versionCode") ? project.versionCode.toInteger() : 1
    def versionNameProp = project.hasProperty("versionName") ? project.versionName : "1.0"

    defaultConfig {
        applicationId "com.example.myapp"
        minSdk 21
        targetSdk 34
        versionCode versionCodeProp
        versionName versionNameProp
        multiDexEnabled true

        buildConfigField "String", "WEB_ASSET_BASE", '"file:///android_asset/www/"'
    }

    signingConfigs {
        release {
            storeFile file('release-key.jks')
            storePassword System.getenv("SIGNING_KEYSTORE_PASSWORD")
            keyAlias    System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                          'proguard-rules.pro'
            lintOptions {
                checkReleaseBuilds false
                abortOnError false
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    sourceSets {
        main {
            assets.srcDirs += 'src/main/assets/www'
        }
    }

    applicationVariants.all { variant ->
        variant.mergeAssetsProvider.get().dependsOn(copyWebAppAssets)
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.webkit:webkit:1.10.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
}

task copyWebAppAssets(type: Copy) {
    doFirst {
        delete fileTree(dir: 'src/main/assets/www', include: '**')
    }

    from file("$rootDir/frontend/build")
    into file("$projectDir/src/main/assets/www")

    doLast {
        def www = file('src/main/assets/www')
        if (!file("$www/index.html").exists()) {
            throw new GradleException("❌ index.html 未能复制到 assets/www！")
        }
        if (!fileTree(dir: "$www/static/js", include: '*.js').files) {
            throw new GradleException("❌ static/js 目录为空，请检查前端构建或路径配置！")
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.toLowerCase().startsWith('clean')) {
        task.doFirst {
            delete fileTree(dir: 'src/main/assets/www', include: '**')
        }
    }
}
