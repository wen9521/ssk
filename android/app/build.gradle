plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.myapp'
    compileSdk 34

    buildFeatures {
        buildConfig true
    }

    defaultConfig {
        applicationId "com.example.myapp"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        // WEB 资源加载根路径
        buildConfigField "String", "WEB_ASSET_BASE", ""file:///android_asset/www/""
    }

    signingConfigs {
        release {
            storeFile file('release-key.jks')
            storePassword System.getenv("SIGNING_KEYSTORE_PASSWORD")
            keyAlias System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    // 在合并资源前执行 copyWebAppAssets
    applicationVariants.all { variant ->
        variant.mergeAssetsProvider.get().dependsOn(copyWebAppAssets)
        // 确保每次 assemble 之前清理旧资源
        variant.assembleProvider.get().dependsOn("clean${variant.name.capitalize()}")
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.webkit:webkit:1.10.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
}

// 构建前端资源：生成 build/ 目录
task buildWebApp(type: Exec) {
    workingDir file("$rootDir/frontend")
    environment "PUBLIC_URL", "./"
    environment "REACT_APP_ASSET_PATH", "./"

    if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm install && npm run build'
    } else {
        commandLine 'sh', '-c', 'npm install && npm run build'
    }
}

// 复制前端静态资源到 android assets
task copyWebAppAssets(type: Copy) {
    dependsOn buildWebApp

    // 删除旧资源
    doFirst {
        delete fileTree(dir: 'src/main/assets/www', include: '**')
    }

    // 确保是绝对路径，避免相对路径问题
    from file("$rootDir/frontend/build")
    into file("$projectDir/src/main/assets/www")

    // 验证关键文件存在
    doLast {
        def wwwDir = file('src/main/assets/www')
        if (!file("$wwwDir/index.html").exists()) {
            throw new GradleException("index.html 未复制到 assets/www！")
        }
        if (!fileTree(dir: "$wwwDir/static/js", include: '*.js').files) {
            throw new GradleException("static/js 目录为空，前端构建或复制失败！")
        }
    }
}

// 清理任务前先删除 assets/www
tasks.whenTaskAdded { task ->
    if (task.name.startsWith('clean')) {
        task.doFirst {
            delete fileTree(dir: 'src/main/assets/www', include: '**')
        }
    }
}
