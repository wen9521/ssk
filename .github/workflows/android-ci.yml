name: Android CI Full Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # 1. 构建前端
  frontend-build:
    name: 构建前端
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 缓存 node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}

      - name: 安装并打包前端
        run: |
          cd frontend
          npm ci
          npm run build

      - name: 修补 index.html：修改 base href 并去除 "./" 前缀
        run: |
          sed -i -E '
            s|<base href="[^"]*"|<base href="file:///android_asset/www/"|;
            s|src="\./|src="|g;
            s|href="\./|href="|g
          ' frontend/build/index.html

      - name: 上传前端产物
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  # 2. 构建 Debug APK
  android-debug:
    name: 构建 Debug APK
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 准备 assets/www 目录
        run: mkdir -p android/app/src/main/assets/www

      - name: 下载前端产物
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: android/app/src/main/assets/

      - name: 移动前端文件到 www
        run: |
          rm -rf android/app/src/main/assets/www
          mkdir -p android/app/src/main/assets/www
          mv android/app/src/main/assets/index.html android/app/src/main/assets/www/
          mv android/app/src/main/assets/static android/app/src/main/assets/www/

      - name: 设置 Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: 缓存 Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-debug-${{ runner.os }}-${{ hashFiles('android/**/*.gradle*','android/gradle-wrapper.properties') }}

      - name: Assemble Debug APK
        run: |
          cd android
          ./gradlew clean assembleDebug --no-daemon

      - name: 上传 Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: android/app/build/outputs/apk/debug/*.apk

  # 3. 校验 APK 中的 assets
  validate-assets:
    name: 校验 APK 中的前端资源
    needs: android-debug
    runs-on: ubuntu-latest
    steps:
      - name: 下载 Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug
          path: ./apk

      - name: 安装 unzip
        run: sudo apt-get update -y && sudo apt-get install -y unzip

      - name: 列出 assets 目录结构
        run: |
          echo "=== 检查 assets/www/index.html ==="
          unzip -l apk/*.apk | grep "assets/www/index.html" || (echo "❌ 找不到 index.html" && exit 1)
          echo "=== 检查 assets/www/static/js ==="
          unzip -l apk/*.apk | grep "assets/www/static/js" || (echo "❌ 找不到 static/js 目录" && exit 1)
          echo "✅ APK 中的前端资源校验通过"

  # 4. 构建并签名 Release APK
  android-release:
    name: 构建并签名 Release APK
    needs: validate-assets
    runs-on: ubuntu-latest
    env:
      KEYSTORE_BASE64: ${{ secrets.SIGNING_KEYSTORE_BASE64 }}
      STORE_PASSWORD:   ${{ secrets.SIGNING_KEYSTORE_PASSWORD }}
      KEY_ALIAS:        ${{ secrets.SIGNING_KEY_ALIAS }}
      KEY_PASSWORD:     ${{ secrets.SIGNING_KEY_PASSWORD }}
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 准备 assets/www 目录
        run: mkdir -p android/app/src/main/assets/www

      - name: 下载前端产物
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: android/app/src/main/assets/

      - name: 移动前端文件到 www
        run: |
          rm -rf android/app/src/main/assets/www
          mkdir -p android/app/src/main/assets/www
          mv android/app/src/main/assets/index.html android/app/src/main/assets/www/
          mv android/app/src/main/assets/static android/app/src/main/assets/www/

      - name: 设置 Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: 缓存 Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-release-${{ runner.os }}-${{ hashFiles('android/**/*.gradle*','android/gradle-wrapper.properties') }}

      - name: 解码 Keystore
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/release-key.jks
          chmod 600 android/app/release-key.jks

      - name: Assemble Release APK 并签名
        run: |
          cd android
          ./gradlew clean assembleRelease \
            -Pandroid.injected.signing.store.file="$PWD/app/release-key.jks" \
            -Pandroid.injected.signing.store.password="$STORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD" \
            --no-daemon

      - name: 上传 Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/*.apk

  # 5. 发布到 GitHub Releases
  publish-release:
    name: 发布 GitHub Release
    needs: android-release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: 下载 Release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: release-artifacts

      - name: 创建 GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: release-artifacts/*.apk
          tag: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
