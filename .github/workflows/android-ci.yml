name: Android CI + Emulator Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1. 构建前端产物（根 Job）
  frontend-build:
    name: 构建前端
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 缓存 node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}

      - name: 安装并打包前端
        run: |
          cd frontend
          npm ci
          npm run build

      - name: 修补 index.html：修改 base href 并去除 "./" 前缀
        run: |
          sed -i -E '
            s|<base href="[^"]*"|<base href="file:///android_asset/www/"|;
            s|src="\./|src="|g;
            s|href="\./|href="|g
          ' frontend/build/index.html

      - name: 上传前端产物
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  # 2. 构建 Debug APK
  android-debug:
    name: 构建 Debug APK
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 准备 assets/www 目录
        run: mkdir -p android/app/src/main/assets/www

      - name: 下载前端产物
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: android/app/src/main/assets/

      - name: 移动前端文件到 www
        run: |
          rm -rf android/app/src/main/assets/www
          mkdir -p android/app/src/main/assets/www
          mv android/app/src/main/assets/index.html android/app/src/main/assets/www/
          mv android/app/src/main/assets/static android/app/src/main/assets/www/

      - name: 设置 Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: 缓存 Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-debug-${{ runner.os }}-${{ hashFiles('android/**/*.gradle*','android/gradle-wrapper.properties') }}

      - name: Assemble Debug APK
        run: |
          cd android
          ./gradlew clean assembleDebug --no-daemon

      - name: 上传 Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: android/app/build/outputs/apk/debug/*.apk

  # 3. 校验 APK 中前端资源
  validate-assets:
    name: 校验 APK 资源
    needs: android-debug
    runs-on: ubuntu-latest
    steps:
      - name: 下载 Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug
          path: ./apk

      - name: 安装 unzip
        run: sudo apt-get update -y && sudo apt-get install -y unzip

      - name: 列出 assets 目录
        run: |
          unzip -l apk/*.apk | grep "assets/www/index.html" || exit 1
          unzip -l apk/*.apk | grep "assets/www/static/js" || exit 1

  # 4. 启动 Emulator 并抓取 MainActivity 日志
  emulator-test:
    name: 模拟器抓取 Logcat
    needs: android-debug
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 下载 Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug
          path: ./app-debug

      - name: 启动 Emulator 并执行脚本
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 31
          arch: x86_64
          target: google_apis_playstore
          emulator-options: "-no-window -no-audio"
          emulator-boot-timeout: 180000
          script: |
            adb install -r app-debug/*.apk
            sleep 10
            adb logcat -d \
              | grep -E "MainActivity|原始 HTML|修补后 HTML" \
              > emulator-logcat.txt

      - name: 上传 Emulator 日志
        uses: actions/upload-artifact@v4
        with:
          name: emulator-logcat
          path: emulator-logcat.txt
