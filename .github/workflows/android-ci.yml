name: Android CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend-build:
    name: Build Frontend Assets
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    outputs:
      build-hash: ${{ steps.hash-output.outputs.build-hash }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Verify Frontend Lockfile
        run: |
          if [ ! -f "frontend/package-lock.json" ]; then
            echo "::error::package-lock.json not found"
            exit 1
          fi

      - name: Install Dependencies & Build
        run: |
          npm ci --prefix frontend --prefer-offline
          cd frontend
          PUBLIC_URL='https://appassets.androidplatform.net/www' \
            REACT_APP_BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            npm run build
        env:
          GENERATE_SOURCEMAP: false

      - name: Generate Build Hash
        id: hash-output
        run: |
          BUILD_HASH=$(find frontend/build -type f -exec sha256sum {} + \
                       | sort | sha256sum | cut -d' ' -f1)
          echo "build-hash=$BUILD_HASH" >> $GITHUB_OUTPUT

      - name: Upload Frontend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-assets
          path: frontend/build/
          retention-days: 1

  android-build:
    name: Build Android APK
    needs: frontend-build
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    env:
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Frontend Assets
        uses: actions/download-artifact@v4
        with:
          name: frontend-assets
          path: android/app/src/main/assets/www

      - name: Verify Assets Directory
        run: |
          if [ ! -d "android/app/src/main/assets/www" ]; then
            echo "::error::Frontend assets missing"
            exit 1
          fi
          echo "Found $(find android/app/src/main/assets/www -type f | wc -l) frontend files"

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle
          cache-dependency-path: |
            android/**/*.gradle
            android/**/*.gradle.kts
            android/gradle/wrapper/gradle-wrapper.properties

      - name: Restore Keystore & Validate
        run: |
          if [ -z "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" ]; then
            echo "::error::SIGNING_KEYSTORE_BASE64 is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SIGNING_KEYSTORE_PASSWORD }}" ] || \
             [ -z "${{ secrets.SIGNING_KEY_ALIAS }}" ] || \
             [ -z "${{ secrets.SIGNING_KEY_PASSWORD }}" ]; then
            echo "::error::One or more signing secrets are missing"
            exit 1
          fi

          mkdir -p android/app
          echo "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" \
            | base64 -d > android/app/release.keystore
          ls -lh android/app/release.keystore

          keytool -list -v \
            -keystore android/app/release.keystore \
            -storepass "${{ secrets.SIGNING_KEYSTORE_PASSWORD }}" \
            -alias "${{ secrets.SIGNING_KEY_ALIAS }}"

      - name: Build Release APK
        run: |
          cd android
          ./gradlew clean assembleRelease \
            -Pandroid.injected.signing.store.file=$PWD/app/release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.SIGNING_KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.SIGNING_KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.SIGNING_KEY_PASSWORD }} \
            --no-daemon --stacktrace
        env:
          ORG_GRADLE_PROJECT_RELEASE_STORE_PASSWORD: ${{ secrets.SIGNING_KEYSTORE_PASSWORD }}
          ORG_GRADLE_PROJECT_RELEASE_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}

      - name: Verify APK Exists
        run: |
          APK=android/app/build/outputs/apk/release/app-release.apk
          if [ ! -f "$APK" ]; then
            echo "::error::APK not found at $APK"
            exit 1
          fi
          echo "APK size: $(du -h "$APK" | cut -f1)"

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: [frontend-build, android-build]
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: .

      - name: Extract Version
        id: version
        run: |
          VERSION=$(grep versionName android/app/build.gradle \
                    | head -n1 \
                    | sed -E 's/.*versionName "(.*)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Rename APK with Version
        run: |
          mv app-release.apk app-v${{ steps.version.outputs.version }}.apk

      - name: Generate SHA256 Checksum
        id: checksum
        run: |
          SHA256=$(sha256sum app-v${{ steps.version.outputs.version }}.apk \
                   | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT

      - name: Extract Changelog
        id: changelog
        run: |
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          git log -n 5 --pretty=format:"- %s (%an)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get Current Date
        id: get-date
        run: |
          echo "date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ### Android App Release
            **Version**: v${{ steps.version.outputs.version }}  
            **Build Date**: ${{ steps.get-date.outputs.date }}  
            **Frontend Hash**: ${{ needs.frontend-build.outputs.build-hash }}  
            **APK SHA256**: `${{ steps.checksum.outputs.sha256 }}`  

            **Recent Changes:**  
            ${{ steps.changelog.outputs.changelog }}
          files: app-v${{ steps.version.outputs.version }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
