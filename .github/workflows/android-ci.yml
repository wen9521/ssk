name: Android CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  frontend-build:
    name: 构建前端
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 缓存前端依赖
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}

      - name: 安装并构建前端
        run: |
          cd frontend
          npm ci
          npm run build

      - name: 修补 build/index.html 中的路径
        run: |
          sed -i -E '
            s|<base href="[^"]*"|<base href="https://appassets.androidplatform.net/www/"|;
            s|src="\./|src="|g;
            s|href="\./|href="|g
          ' frontend/build/index.html

      - name: 上传前端构建产物
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  android-debug:
    name: 构建 Debug APK
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 准备 assets 目录
        run: |
          mkdir -p android/app/src/main/assets/frontend-build
          mkdir -p android/app/src/main/assets/www

      - name: 下载前端构建产物
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: android/app/src/main/assets/frontend-build

      - name: 拷贝前端静态文件到 assets/www
        run: |
          rm -rf android/app/src/main/assets/www/*
          cp -R android/app/src/main/assets/frontend-build/* android/app/src/main/assets/www/

      - name: 列出打包进 APK 的前端资源
        run: ls -R android/app/src/main/assets/www

      - name: 设置 Java 环境
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: 缓存 Gradle 构建
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-debug-${{ runner.os }}-${{ hashFiles('android/**/*.gradle*','android/gradle-wrapper.properties') }}

      - name: 构建 Debug APK
        run: |
          cd android
          ./gradlew clean assembleDebug --no-daemon

      - name: 验证 APK 是否包含前端资源
        run: unzip -l android/app/build/outputs/apk/debug/app-debug.apk | grep "assets/www/"

      - name: 上传 Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: android/app/build/outputs/apk/debug/*.apk

  release:
    name: 自动发布 Release
    needs: android-debug
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 下载 Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug
          path: ./release

      - name: 创建 GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: 自动发布 Debug 版本
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传 APK 到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/app-debug.apk
          asset_name: app-debug.apk
          asset_content_type: application/vnd.android.package-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
