name: Android CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend-build:
    name: Build Frontend Assets
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    outputs:
      build-hash: ${{ steps.hash-output.outputs.build-hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install & build frontend
        run: |
          npm ci --prefix frontend --prefer-offline
          cd frontend
          PUBLIC_URL='https://appassets.androidplatform.net/www' \
            REACT_APP_BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            npm run build

      # 修复点1：确保哈希计算包含所有文件元数据
      - name: Generate frontend hash
        id: hash-output
        run: |
          # 使用更稳健的哈希计算方式
          BUILD_HASH=$(tar cf - frontend/build | sha256sum | cut -d' ' -f1)
          echo "build-hash=$BUILD_HASH" >> $GITHUB_OUTPUT
          echo "Calculated hash: $BUILD_HASH"

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-assets
          path: frontend/build/
          retention-days: 1

  android-build:
    name: Build Android APKs
    needs: frontend-build
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    env:
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true
    outputs:
      versionName: ${{ steps.versioning.outputs.versionName }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version info
        id: versioning
        run: |
          VERSION_NAME=1.0.${{ github.run_number }}
          echo "versionCode=${{ github.run_number }}" >> $GITHUB_ENV
          echo "versionName=${VERSION_NAME}" >> $GITHUB_ENV
          echo "versionName=${VERSION_NAME}" >> $GITHUB_OUTPUT

      - name: Download frontend assets
        uses: actions/download-artifact@v4
        with:
          name: frontend-assets
          path: android/app/src/main/assets/www

      - name: Verify assets directory
        run: |
          if [ ! -d "android/app/src/main/assets/www" ]; then
            echo "::error::Frontend assets missing"
            exit 1
          fi
          echo "Found $(find android/app/src/main/assets/www -type f | wc -l) files"

      # 修复点2：使用与前端构建相同的哈希计算方法
      - name: Verify assets hash
        run: |
          # 使用tar创建一致的归档文件进行哈希计算
          CURRENT_HASH=$(tar cf - android/app/src/main/assets/www | sha256sum | cut -d' ' -f1)
          EXPECTED_HASH="${{ needs.frontend-build.outputs.build-hash }}"
          
          echo "Expected hash: $EXPECTED_HASH"
          echo "Current hash: $CURRENT_HASH"
          
          if [ "$CURRENT_HASH" != "$EXPECTED_HASH" ]; then
            echo "::error::Frontend assets hash mismatch: expected $EXPECTED_HASH, got $CURRENT_HASH"
            # 添加调试信息
            echo "File list in www directory:"
            find android/app/src/main/assets/www -type f -exec ls -l {} \;
            exit 1
          fi

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Restore keystore & validate
        run: |
          mkdir -p android/app
          echo "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" | base64 -d \
            > android/app/release-key.jks
          keytool -list -v \
            -keystore android/app/release-key.jks \
            -storepass "${{ secrets.SIGNING_KEYSTORE_PASSWORD }}" \
            -alias "${{ secrets.SIGNING_KEY_ALIAS }}"

      - name: Build Release APK
        run: |
          cd android
          ./gradlew clean assembleRelease \
            -PversionCode=${{ env.versionCode }} \
            -PversionName=${{ env.versionName }} \
            -Pandroid.injected.signing.store.file=$PWD/app/release-key.jks \
            -Pandroid.injected.signing.store.password=${{ secrets.SIGNING_KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.SIGNING_KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.SIGNING_KEY_PASSWORD }} \
            --no-daemon --stacktrace

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 1

      - name: Build Debug APK
        run: |
          cd android
          ./gradlew assembleDebug \
            -PversionCode=${{ env.versionCode }} \
            -PversionName=${{ env.versionName }} \
            --no-daemon --stacktrace

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: android-build
    runs-on: ubuntu-22.04
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: android-release-apk

      - name: Generate Release SHA256
        id: checksum
        run: |
          S=$(sha256sum app-release.apk | cut -d' ' -f1)
          echo "sha256=$S" >> $GITHUB_OUTPUT

      - name: Get Build Date
        id: get-date
        run: echo "date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Prepare Release Notes
        run: |
          cat << 'EOF' > release_notes.md
          ### Android App v${{ needs.android-build.outputs.versionName }}
          **Build Number**: ${{ github.run_number }}
          **Build Date**: ${{ steps.get-date.outputs.date }}
          **Frontend Hash**: ${{ needs.frontend-build.outputs.build-hash }}
          **Release SHA256**: `${{ steps.checksum.outputs.sha256 }}`
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.android-build.outputs.versionName }}
          name: Release v${{ needs.android-build.outputs.versionName }}
          body_path: release_notes.md
          files: app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  beta:
    name: Create GitHub Prerelease
    needs: android-build
    runs-on: ubuntu-22.04
    if: ${{ github.ref == 'refs/heads/develop' }}
    steps:
      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: android-debug-apk

      - name: Generate Debug SHA256
        id: checksum-beta
        run: |
          S=$(sha256sum app-debug.apk | cut -d' ' -f1)
          echo "sha256=$S" >> $GITHUB_OUTPUT

      - name: Get Build Date
        id: get-date-beta
        run: echo "date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Prepare Prerelease Notes
        run: |
          cat << 'EOF' > beta_notes.md
          ### Android App v${{ needs.android-build.outputs.versionName }}-beta
          **Build Number**: ${{ github.run_number }}
          **Build Date**: ${{ steps.get-date-beta.outputs.date }}
          **Frontend Hash**: ${{ needs.frontend-build.outputs.build-hash }}
          **Debug SHA256**: `${{ steps.checksum-beta.outputs.sha256 }}`
          EOF

      - name: Create GitHub Prerelease
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.android-build.outputs.versionName }}-beta.${{ github.run_number }}
          name: Prerelease v${{ needs.android-build.outputs.versionName }}-beta
          body_path: beta_notes.md
          files: app-debug.apk
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
