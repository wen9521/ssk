# 文件路径：.github/workflows/android-cicd.yml
name: Android CI/CD Optimized

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # 1. 前端编译：生成 React 静态资源到 frontend/build
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install & Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Upload Frontend Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

  # 2. Android Debug：合并前端资源并打包调试 APK
  android-debug:
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: android/app/src/main/assets

      - name: Flatten assets folder
        run: |
          cd android/app/src/main/assets
          # 将 build/* 下的文件搬到 assets 根目录
          mv build/* .
          rm -rf build

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-debug-${{ runner.os }}-${{ hashFiles('android/**/build.gradle*','android/gradle-wrapper.properties') }}

      - name: Build Debug APK
        run: |
          cd android
          ./gradlew clean assembleDebug --no-daemon

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: android/app/build/outputs/apk/debug/*.apk

  # 3. Android Release：签名打包 Release APK
  android-release:
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: android/app/src/main/assets

      - name: Flatten assets folder
        run: |
          cd android/app/src/main/assets
          mv build/* .
          rm -rf build

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-release-${{ runner.os }}-${{ hashFiles('android/**/build.gradle*','android/gradle-wrapper.properties') }}

      - name: Decode & Place Keystore
        run: |
          echo "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" | base64 -d > android/app/release-key.jks
          chmod 600 android/app/release-key.jks
          cat <<EOF > android/keystore.properties
          storeFile=app/release-key.jks
          storePassword=${{ secrets.SIGNING_KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.SIGNING_KEY_ALIAS }}
          keyPassword=${{ secrets.SIGNING_KEY_PASSWORD }}
          EOF

      - name: Build & Sign Release APK
        run: |
          cd android
          ./gradlew clean assembleRelease --no-daemon

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/*.apk

  # 4. 自动发布到 GitHub Releases
  publish-release:
    needs: android-release
    runs-on: ubuntu-latest
    steps:
      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: release-artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: release-artifacts/*.apk
          tag: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
