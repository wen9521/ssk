# 文件：.github/workflows/android-build.yml
name: Android CI/CD Optimized

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # 1. 编译并打包前端资源
  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install & build frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Patch index.html base href
        run: |
          sed -i 's|<base href="./"|<base href="file:///android_asset/www/"|' frontend/build/index.html

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/**

  # 2. Android Debug 构建
  android-debug:
    name: Android Debug Build
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare assets/www directory
        run: mkdir -p android/app/src/main/assets/www

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: android/app/src/main/assets/www

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-debug-${{ runner.os }}-${{ hashFiles('android/**/*.gradle*','android/gradle-wrapper.properties') }}

      - name: Build Debug APK
        run: |
          cd android
          ./gradlew clean assembleDebug --no-daemon

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: android/app/build/outputs/apk/debug/*.apk

  # 3. Android Release 构建 & 签名
  android-release:
    name: Android Release Build
    needs: frontend-build
    runs-on: ubuntu-latest
    env:
      KEYSTORE_BASE64: ${{ secrets.SIGNING_KEYSTORE_BASE64 }}
      STORE_PASSWORD:   ${{ secrets.SIGNING_KEYSTORE_PASSWORD }}
      KEY_ALIAS:        ${{ secrets.SIGNING_KEY_ALIAS }}
      KEY_PASSWORD:     ${{ secrets.SIGNING_KEY_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare assets/www directory
        run: mkdir -p android/app/src/main/assets/www

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: android/app/src/main/assets/www

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-release-${{ runner.os }}-${{ hashFiles('android/**/*.gradle*','android/gradle-wrapper.properties') }}

      - name: Decode keystore
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/release-key.jks
          chmod 600 android/app/release-key.jks

      - name: Build & sign Release APK
        run: |
          cd android
          ./gradlew clean assembleRelease \
            -Pandroid.injected.signing.store.file="$PWD/app/release-key.jks" \
            -Pandroid.injected.signing.store.password="$STORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD" \
            --no-daemon

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/*.apk

  # 4. 自动发布到 GitHub Releases
  publish-release:
    name: Publish to GitHub Releases
    needs: android-release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: release-artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: release-artifacts/*.apk
          tag: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
