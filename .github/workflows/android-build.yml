name: Android CI/CD Optimized

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # 1. 前端编译并打包为 assets
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Upload Frontend Assets
        uses: actions/upload-artifact@v4
        with:
          name: frontend-assets
          path: frontend/build

  # 2. Android Debug 构建
  android-debug:
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Frontend Assets
        uses: actions/download-artifact@v4
        with:
          name: frontend-assets
          path: android/app/src/main/assets

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/android/**/build.gradle*','**/android/gradle-wrapper.properties') }}

      - name: Build Debug APK
        run: |
          cd android
          ./gradlew clean assembleDebug --no-daemon

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: android/app/build/outputs/apk/debug/*.apk

  # 3. Android Release 构建并签名
  android-release:
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Frontend Assets
        uses: actions/download-artifact@v4
        with:
          name: frontend-assets
          path: android/app/src/main/assets

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-${{ runner.os }}-release-${{ hashFiles('**/android/**/build.gradle*','**/android/gradle-wrapper.properties') }}

      - name: Decode & Set Up Keystore
        run: |
          echo "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" | base64 -d > release.keystore
          cat <<EOF > android/keystore.properties
          storeFile=../release.keystore
          storePassword=${{ secrets.SIGNING_KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.SIGNING_KEY_ALIAS }}
          keyPassword=${{ secrets.SIGNING_KEY_PASSWORD }}
          EOF

      - name: Build & Sign Release APK
        run: |
          cd android
          ./gradlew clean assembleRelease --no-daemon

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/*.apk

  # 4. 自动创建 GitHub Release 并附带 APK
  publish-release:
    needs: android-release
    runs-on: ubuntu-latest
    steps:
      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: release-artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: release-artifacts/*.apk
          tag: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
