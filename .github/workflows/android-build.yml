name: Android CI/CD Optimized

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      workspace: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup outputs
        id: set-output
        run: echo "workspace=${{ github.workspace }}" >> $GITHUB_OUTPUT

  frontend-build:
    needs: init
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ needs.init.outputs.workspace }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Verify project structure
        run: |
          echo "Workspace: ${{ github.workspace }}"
          echo "Root contents:"
          ls -la
          
          # 确保前端目录存在
          if [ ! -d "frontend" ]; then
            echo "::error::Frontend directory missing!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          echo "Frontend contents:"
          ls -la frontend
          
          # 确保package.json存在
          if [ ! -f "frontend/package.json" ]; then
            echo "::error::package.json not found in frontend!"
            exit 1
          fi
          
          # 确保package-lock.json存在
          if [ ! -f "frontend/package-lock.json" ]; then
            echo "::error::package-lock.json not found in frontend!"
            exit 1
          fi
          
          # 验证扑克牌资源
          if [ ! -d "frontend/public/assets/cards" ]; then
            echo "::error::Card assets directory missing!"
            exit 1
          fi
          
          card_count=$(find frontend/public/assets/cards -name "*.svg" | wc -l)
          if [ "$card_count" -lt 54 ]; then
            echo "::error::Missing card assets! Found $card_count, expected at least 54"
            exit 1
          fi
          echo "✅ Verified $card_count card assets"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # 关键修复：指定缓存依赖路径
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
        working-directory: frontend
      
      - name: Build frontend
        run: npm run build
        working-directory: frontend
        
      - name: Verify build output
        run: |
          if [ ! -d "frontend/build" ]; then
            echo "::error::Build output directory missing!"
            exit 1
          fi
          
          if [ ! -f "frontend/build/index.html" ]; then
            echo "::error::index.html missing in build output!"
            exit 1
          fi
          
          echo "Build output contents:"
          ls -la frontend/build
      
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-assets
          path: frontend/build

  android-build:
    needs: [init, frontend-build]
    runs-on: ubuntu-latest
    env:
      GRADLE_USER_HOME: ${{ needs.init.outputs.workspace }}/.gradle
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: frontend-assets
          path: android/app/src/main/assets
      
      - name: Verify Android assets
        run: |
          echo "Android assets path: android/app/src/main/assets"
          if [ ! -d "android/app/src/main/assets" ]; then
            echo "::error::Android assets directory not created!"
            exit 1
          fi
          
          if [ ! -f "android/app/src/main/assets/index.html" ]; then
            echo "::error::Frontend assets not copied to Android!"
            echo "Assets directory contents:"
            ls -la android/app/src/main/assets
            exit 1
          fi

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.2
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('android/**/*.gradle*', 'android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      
      - name: Build Debug APK
        working-directory: android
        run: ./gradlew assembleDebug --no-daemon
        
      - name: Verify APK
        run: |
          if [ ! -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "::error::Debug APK not generated!"
            echo "APK directory contents:"
            ls -la android/app/build/outputs/apk/debug/
            exit 1
          fi
      
      - uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: android/app/build/outputs/apk/debug/*.apk

  android-release:
    needs: [init, frontend-build]
    runs-on: ubuntu-latest
    env:
      GRADLE_USER_HOME: ${{ needs.init.outputs.workspace }}/.gradle
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: frontend-assets
          path: android/app/src/main/assets
      
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.2
      
      - name: Setup Signing Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > keystore.jks
          echo "Keystore created with size: $(wc -c < keystore.jks) bytes"
          echo "Current directory: $(pwd)"
          ls -la
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-release-${{ hashFiles('android/**/*.gradle*') }}
          restore-keys: |
            gradle-${{ runner.os }}-release-
      
      - name: Build Release APK
        working-directory: android
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: |
          ./gradlew clean assembleRelease \
            -Pandroid.injected.signing.store.file="${{ github.workspace }}/keystore.jks" \
            -Pandroid.injected.signing.store.password="$SIGNING_STORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$SIGNING_KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$SIGNING_KEY_PASSWORD" \
            --no-daemon
            
      - name: Verify Release APK
        run: |
          if [ ! -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
            echo "::error::Release APK not generated!"
            echo "APK directory contents:"
            ls -la android/app/build/outputs/apk/release/
            exit 1
          fi
      
      - uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/*.apk
          
      - name: Cleanup keystore
        run: rm -f keystore.jks
        if: always()
