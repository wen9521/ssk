name: Android CI/CD Optimized

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    outputs:
      build_hash: ${{ steps.hash_frontend.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate frontend hash
        id: hash_frontend
        run: echo "hash=$(sha256sum frontend/package-lock.json | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install & build frontend
        run: |
          cd frontend
          npm ci --prefer-offline
          npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ steps.hash_frontend.outputs.hash }}
          path: frontend/build/**

  android-debug:
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ needs.frontend-build.outputs.build_hash }}

      - name: Setup Android environment
        uses: android-actions/setup-android@v3

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Build debug APK
        run: |
          mkdir -p android/app/src/main/assets/www
          cp -R frontend-build-${{ needs.frontend-build.outputs.build_hash }}/* android/app/src/main/assets/www/
          cd android
          ./gradlew clean assembleDebug --no-daemon --stacktrace

      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: android/app/build/outputs/apk/debug/*.apk

  android-release:
    needs: frontend-build
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    env:
      KEYSTORE_BASE64: ${{ secrets.SIGNING_KEYSTORE_BASE64 }}
      STORE_PASSWORD: ${{ secrets.SIGNING_KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ needs.frontend-build.outputs.build_hash }}

      - name: Setup Android environment
        uses: android-actions/setup-android@v3

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Configure signing
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/release-key.jks
          echo "RELEASE_STORE_FILE=release-key.jks" >> android/gradle.properties
          echo "RELEASE_STORE_PASSWORD=$STORE_PASSWORD" >> android/gradle.properties
          echo "RELEASE_KEY_ALIAS=$KEY_ALIAS" >> android/gradle.properties
          echo "RELEASE_KEY_PASSWORD=$KEY_PASSWORD" >> android/gradle.properties
          chmod 600 android/app/release-key.jks

      - name: Build release APK
        run: |
          mkdir -p android/app/src/main/assets/www
          cp -R frontend-build-${{ needs.frontend-build.outputs.build_hash }}/* android/app/src/main/assets/www/
          cd android
          ./gradlew clean assembleRelease --no-daemon --stacktrace

      - name: Upload release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/*.apk

  publish-release:
    needs: android-release
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release

      - name: Extract version name
        id: version
        run: |
          VERSION=$(aapt dump badging *.apk | grep "versionName" | cut -d\' -f6)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "*.apk"
          tag: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
