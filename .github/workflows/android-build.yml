name: Build Android APK

# 当代码推送到 main 分支时触发
on:
  push:
    branches: [ "main" ]

jobs:
  build-apk:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出 GitHub 仓库的代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. 设置 Node.js 环境，用于构建前端
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # 您可以根据项目需求选择版本

      # 3. 构建前端并为 Android 进行适配
      - name: Build frontend for Android
        run: |
          echo "Navigating to frontend directory..."
          cd frontend

          echo "Installing dependencies..."
          npm install

          echo "Modifying package.json for Android WebView..."
          # 关键步骤：将 "homepage" 从 "." (用于 Web) 修改为 "./" (用于 APK)
          sed -i 's/"homepage": "."/"homepage": ".\/"/' package.json

          echo "Building the frontend..."
          npm run build
          echo "Frontend build complete."
      
      # 4. 将构建好的前端文件复制到 Android 项目的 assets 目录
      - name: Copy frontend files to Android assets
        run: |
          echo "Creating assets directory..."
          mkdir -p android/app/src/main/assets/www
          
          echo "Copying built files..."
          cp -r frontend/build/* android/app/src/main/assets/www/
          echo "Copy complete."

      # 5. 设置 Java (JDK) 环境，用于构建 Android 应用
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 6. 构建 APK
      - name: Build debug APK
        run: |
          # 赋予 gradlew 执行权限
          chmod +x android/gradlew
          
          # 运行 Gradle 构建命令
          cd android
          ./gradlew assembleDebug

      # 7. 上传生成的 APK 文件作为构建产物
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
