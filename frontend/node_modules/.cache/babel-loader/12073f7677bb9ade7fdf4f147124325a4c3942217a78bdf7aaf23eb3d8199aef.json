{"ast":null,"code":"import{create}from'zustand';import{produce}from'immer';// 游戏的不同阶段\nconst STAGES={LOBBY:'lobby',// 游戏大厅\nPLAYING:'playing',// 游戏中，理牌\nSUBMITTED:'submitted',// 本地玩家已提交牌，等待其他玩家\nFINISHED:'finished'// 所有玩家出牌，结算完成\n};const useGameStore=create(set=>({// --- 状态 (State) ---\nstage:STAGES.PLAYING,// 初始阶段设为游戏，方便调试\nplayers:[{id:'player1',name:'我',cards:[],isReady:false},{id:'player2',name:'电脑 A',cards:[],isReady:true},{id:'player3',name:'电脑 B',cards:[],isReady:true},{id:'player4',name:'电脑 C',cards:[],isReady:true}],myCards:[],// 本地玩家的13张手牌\nfinalResults:null,// { scores: { player1: 10, ... }, details: [...] }\n// --- 操作 (Actions) ---\n// 设置游戏阶段\nsetStage:newStage=>set({stage:newStage}),// 开始新一局，发牌\ndealNewRound:shuffledDecks=>set(produce(state=>{state.stage=STAGES.PLAYING;state.finalResults=null;state.players.forEach((player,index)=>{player.cards=shuffledDecks[index];player.isReady=player.id.startsWith('computer');// 电脑默认准备好\n});state.myCards=shuffledDecks[0];})),// 玩家提交牌组\nsubmitMyHand:sortedHand=>set(produce(state=>{// 在这里可以添加调用后端API的逻辑\n// 为简化，我们先直接进入结算阶段\nconsole.log(\"提交的牌组:\",sortedHand);state.stage=STAGES.SUBMITTED;state.players[0].isReady=true;// --- 模拟后端计算 ---\n// 在真实应用中，这里会是一个 fetch 调用\n// 然后在 .then() 中调用 setFinalResults\n})),// 设置最终结算结果\nsetFinalResults:results=>set(produce(state=>{state.finalResults=results;state.stage=STAGES.FINISHED;}))}));export{useGameStore,STAGES};","map":{"version":3,"names":["create","produce","STAGES","LOBBY","PLAYING","SUBMITTED","FINISHED","useGameStore","set","stage","players","id","name","cards","isReady","myCards","finalResults","setStage","newStage","dealNewRound","shuffledDecks","state","forEach","player","index","startsWith","submitMyHand","sortedHand","console","log","setFinalResults","results"],"sources":["/home/user/ssk/frontend/src/utils/store.js"],"sourcesContent":["import { create } from 'zustand';\nimport { produce } from 'immer';\n\n// 游戏的不同阶段\nconst STAGES = {\n  LOBBY: 'lobby',          // 游戏大厅\n  PLAYING: 'playing',      // 游戏中，理牌\n  SUBMITTED: 'submitted',  // 本地玩家已提交牌，等待其他玩家\n  FINISHED: 'finished',    // 所有玩家出牌，结算完成\n};\n\nconst useGameStore = create((set) => ({\n  // --- 状态 (State) ---\n  stage: STAGES.PLAYING, // 初始阶段设为游戏，方便调试\n  players: [\n    { id: 'player1', name: '我', cards: [], isReady: false },\n    { id: 'player2', name: '电脑 A', cards: [], isReady: true },\n    { id: 'player3', name: '电脑 B', cards: [], isReady: true },\n    { id: 'player4', name: '电脑 C', cards: [], isReady: true },\n  ],\n  myCards: [], // 本地玩家的13张手牌\n  finalResults: null, // { scores: { player1: 10, ... }, details: [...] }\n\n  // --- 操作 (Actions) ---\n\n  // 设置游戏阶段\n  setStage: (newStage) => set({ stage: newStage }),\n\n  // 开始新一局，发牌\n  dealNewRound: (shuffledDecks) => set(\n    produce((state) => {\n      state.stage = STAGES.PLAYING;\n      state.finalResults = null;\n      state.players.forEach((player, index) => {\n        player.cards = shuffledDecks[index];\n        player.isReady = player.id.startsWith('computer'); // 电脑默认准备好\n      });\n      state.myCards = shuffledDecks[0];\n    })\n  ),\n\n  // 玩家提交牌组\n  submitMyHand: (sortedHand) => set(\n    produce((state) => {\n      // 在这里可以添加调用后端API的逻辑\n      // 为简化，我们先直接进入结算阶段\n      console.log(\"提交的牌组:\", sortedHand);\n      state.stage = STAGES.SUBMITTED;\n      state.players[0].isReady = true;\n\n      // --- 模拟后端计算 ---\n      // 在真实应用中，这里会是一个 fetch 调用\n      // 然后在 .then() 中调用 setFinalResults\n    })\n  ),\n\n  // 设置最终结算结果\n  setFinalResults: (results) => set(\n    produce((state) => {\n      state.finalResults = results;\n      state.stage = STAGES.FINISHED;\n    })\n  ),\n\n}));\n\nexport { useGameStore, STAGES };\n"],"mappings":"AAAA,OAASA,MAAM,KAAQ,SAAS,CAChC,OAASC,OAAO,KAAQ,OAAO,CAE/B;AACA,KAAM,CAAAC,MAAM,CAAG,CACbC,KAAK,CAAE,OAAO,CAAW;AACzBC,OAAO,CAAE,SAAS,CAAO;AACzBC,SAAS,CAAE,WAAW,CAAG;AACzBC,QAAQ,CAAE,UAAe;AAC3B,CAAC,CAED,KAAM,CAAAC,YAAY,CAAGP,MAAM,CAAEQ,GAAG,GAAM,CACpC;AACAC,KAAK,CAAEP,MAAM,CAACE,OAAO,CAAE;AACvBM,OAAO,CAAE,CACP,CAAEC,EAAE,CAAE,SAAS,CAAEC,IAAI,CAAE,GAAG,CAAEC,KAAK,CAAE,EAAE,CAAEC,OAAO,CAAE,KAAM,CAAC,CACvD,CAAEH,EAAE,CAAE,SAAS,CAAEC,IAAI,CAAE,MAAM,CAAEC,KAAK,CAAE,EAAE,CAAEC,OAAO,CAAE,IAAK,CAAC,CACzD,CAAEH,EAAE,CAAE,SAAS,CAAEC,IAAI,CAAE,MAAM,CAAEC,KAAK,CAAE,EAAE,CAAEC,OAAO,CAAE,IAAK,CAAC,CACzD,CAAEH,EAAE,CAAE,SAAS,CAAEC,IAAI,CAAE,MAAM,CAAEC,KAAK,CAAE,EAAE,CAAEC,OAAO,CAAE,IAAK,CAAC,CAC1D,CACDC,OAAO,CAAE,EAAE,CAAE;AACbC,YAAY,CAAE,IAAI,CAAE;AAEpB;AAEA;AACAC,QAAQ,CAAGC,QAAQ,EAAKV,GAAG,CAAC,CAAEC,KAAK,CAAES,QAAS,CAAC,CAAC,CAEhD;AACAC,YAAY,CAAGC,aAAa,EAAKZ,GAAG,CAClCP,OAAO,CAAEoB,KAAK,EAAK,CACjBA,KAAK,CAACZ,KAAK,CAAGP,MAAM,CAACE,OAAO,CAC5BiB,KAAK,CAACL,YAAY,CAAG,IAAI,CACzBK,KAAK,CAACX,OAAO,CAACY,OAAO,CAAC,CAACC,MAAM,CAAEC,KAAK,GAAK,CACvCD,MAAM,CAACV,KAAK,CAAGO,aAAa,CAACI,KAAK,CAAC,CACnCD,MAAM,CAACT,OAAO,CAAGS,MAAM,CAACZ,EAAE,CAACc,UAAU,CAAC,UAAU,CAAC,CAAE;AACrD,CAAC,CAAC,CACFJ,KAAK,CAACN,OAAO,CAAGK,aAAa,CAAC,CAAC,CAAC,CAClC,CAAC,CACH,CAAC,CAED;AACAM,YAAY,CAAGC,UAAU,EAAKnB,GAAG,CAC/BP,OAAO,CAAEoB,KAAK,EAAK,CACjB;AACA;AACAO,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAEF,UAAU,CAAC,CACjCN,KAAK,CAACZ,KAAK,CAAGP,MAAM,CAACG,SAAS,CAC9BgB,KAAK,CAACX,OAAO,CAAC,CAAC,CAAC,CAACI,OAAO,CAAG,IAAI,CAE/B;AACA;AACA;AACF,CAAC,CACH,CAAC,CAED;AACAgB,eAAe,CAAGC,OAAO,EAAKvB,GAAG,CAC/BP,OAAO,CAAEoB,KAAK,EAAK,CACjBA,KAAK,CAACL,YAAY,CAAGe,OAAO,CAC5BV,KAAK,CAACZ,KAAK,CAAGP,MAAM,CAACI,QAAQ,CAC/B,CAAC,CACH,CAEF,CAAC,CAAC,CAAC,CAEH,OAASC,YAAY,CAAEL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}