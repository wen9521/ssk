{"ast":null,"code":"import React,{useEffect}from'react';import{useNavigate}from'react-router-dom';import GameBoard from'./GameBoard';import Hand from'./Hand';import{useGameStore,STAGES}from'../utils/store';import{createDeck,shuffleDeck}from'../game-logic/deck';import'./Play.css';// The new, simplified, HTTP-based Play component\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function Play(){const navigate=useNavigate();// Get state and actions from our central store\nconst{stage,players,myCards,setStage,dealNewRound,setFinalResults}=useGameStore();// On component mount, create a deck and deal cards to players\nuseEffect(()=>{const deck=createDeck();const shuffled=shuffleDeck(deck);// Distribute cards to 4 players (13 each)\nconst hands=[shuffled.slice(0,13),shuffled.slice(13,26),shuffled.slice(26,39),shuffled.slice(39,52)];dealNewRound(hands);},[dealNewRound]);/**\n   * This is the core function that communicates with our backend.\n   * @param {object} mySortedHand - { head: [...], middle: [...], tail: [...] }\n   */const handleSubmit=async mySortedHand=>{setStage(STAGES.SUBMITTED);console.log('Submitting my hand:',mySortedHand);// 1. Prepare the payload for the backend API\nconst payload=players.map(player=>{if(player.id==='player1'){// This is us\nreturn{id:player.id,hands:mySortedHand};}else{// For computer players, just split their cards naively for now.\n// In a real game, this could be a more complex AI choice.\nreturn{id:player.id,hands:{head:player.cards.slice(0,3),middle:player.cards.slice(3,8),tail:player.cards.slice(8,13)}};}});console.log('Sending to backend:',JSON.stringify(payload,null,2));try{// 2. Call the backend API\nconst response=await fetch('/api/v1/thirteen-water/calculate',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||'Backend calculation failed');}const results=await response.json();console.log('Received results from backend:',results);// 3. Update the central store with the authoritative results\nsetFinalResults(results);}catch(error){console.error('Error submitting hand:',error);// Optional: Revert stage to 'PLAYING' to allow user to try again\nsetStage(STAGES.PLAYING);}};const handlePlayAgain=()=>{// Simply dealing a new round will reset the game state via the store's logic\nconst deck=createDeck();const shuffled=shuffleDeck(deck);const hands=[shuffled.slice(0,13),shuffled.slice(13,26),shuffled.slice(26,39),shuffled.slice(39,52)];dealNewRound(hands);};return/*#__PURE__*/_jsx(\"div\",{className:\"play-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"game-wrapper\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"game-header\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn-quit\",onClick:()=>navigate('/'),children:\"< \\u9000\\u51FA\\u623F\\u95F4\"}),/*#__PURE__*/_jsx(\"div\",{className:\"game-stage-display\",children:stage.toUpperCase()})]}),/*#__PURE__*/_jsx(GameBoard,{players:players,status:stage}),stage!==STAGES.FINISHED&&/*#__PURE__*/_jsx(Hand,{cards:myCards,onSubmit:handleSubmit,gameStatus:stage}),stage===STAGES.FINISHED&&/*#__PURE__*/_jsx(\"div\",{className:\"actions-area\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn-action btn-primary\",onClick:handlePlayAgain,children:\"\\u518D\\u6765\\u4E00\\u5C40\"})})]})});}","map":{"version":3,"names":["React","useEffect","useNavigate","GameBoard","Hand","useGameStore","STAGES","createDeck","shuffleDeck","jsx","_jsx","jsxs","_jsxs","Play","navigate","stage","players","myCards","setStage","dealNewRound","setFinalResults","deck","shuffled","hands","slice","handleSubmit","mySortedHand","SUBMITTED","console","log","payload","map","player","id","head","cards","middle","tail","JSON","stringify","response","fetch","method","headers","body","ok","errorData","json","Error","error","results","PLAYING","handlePlayAgain","className","children","onClick","toUpperCase","status","FINISHED","onSubmit","gameStatus"],"sources":["/home/user/ssk/frontend/src/components/Play.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport GameBoard from './GameBoard';\nimport Hand from './Hand';\nimport { useGameStore, STAGES } from '../utils/store';\nimport { createDeck, shuffleDeck } from '../game-logic/deck';\nimport './Play.css';\n\n// The new, simplified, HTTP-based Play component\nexport default function Play() {\n  const navigate = useNavigate();\n  // Get state and actions from our central store\n  const { stage, players, myCards, setStage, dealNewRound, setFinalResults } = useGameStore();\n\n  // On component mount, create a deck and deal cards to players\n  useEffect(() => {\n    const deck = createDeck();\n    const shuffled = shuffleDeck(deck);\n    \n    // Distribute cards to 4 players (13 each)\n    const hands = [\n      shuffled.slice(0, 13),\n      shuffled.slice(13, 26),\n      shuffled.slice(26, 39),\n      shuffled.slice(39, 52),\n    ];\n    dealNewRound(hands);\n  }, [dealNewRound]);\n\n  /**\n   * This is the core function that communicates with our backend.\n   * @param {object} mySortedHand - { head: [...], middle: [...], tail: [...] }\n   */\n  const handleSubmit = async (mySortedHand) => {\n    setStage(STAGES.SUBMITTED);\n    console.log('Submitting my hand:', mySortedHand);\n\n    // 1. Prepare the payload for the backend API\n    const payload = players.map(player => {\n      if (player.id === 'player1') { // This is us\n        return { id: player.id, hands: mySortedHand };\n      } else {\n        // For computer players, just split their cards naively for now.\n        // In a real game, this could be a more complex AI choice.\n        return {\n          id: player.id,\n          hands: {\n            head: player.cards.slice(0, 3),\n            middle: player.cards.slice(3, 8),\n            tail: player.cards.slice(8, 13),\n          },\n        };\n      }\n    });\n\n    console.log('Sending to backend:', JSON.stringify(payload, null, 2));\n\n    try {\n      // 2. Call the backend API\n      const response = await fetch('/api/v1/thirteen-water/calculate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Backend calculation failed');\n      }\n\n      const results = await response.json();\n      console.log('Received results from backend:', results);\n      \n      // 3. Update the central store with the authoritative results\n      setFinalResults(results);\n\n    } catch (error) {\n      console.error('Error submitting hand:', error);\n      // Optional: Revert stage to 'PLAYING' to allow user to try again\n      setStage(STAGES.PLAYING); \n    }\n  };\n\n  const handlePlayAgain = () => {\n    // Simply dealing a new round will reset the game state via the store's logic\n    const deck = createDeck();\n    const shuffled = shuffleDeck(deck);\n    const hands = [\n      shuffled.slice(0, 13),\n      shuffled.slice(13, 26),\n      shuffled.slice(26, 39),\n      shuffled.slice(39, 52),\n    ];\n    dealNewRound(hands);\n  };\n\n  return (\n    <div className=\"play-container\">\n      <div className=\"game-wrapper\">\n        <div className=\"game-header\">\n          <button className=\"btn-quit\" onClick={() => navigate('/')}>\n            &lt; 退出房间\n          </button>\n          <div className=\"game-stage-display\">\n            {stage.toUpperCase()}\n          </div>\n        </div>\n\n        <GameBoard players={players} status={stage} />\n\n        {stage !== STAGES.FINISHED && (\n          <Hand\n            cards={myCards}\n            onSubmit={handleSubmit}\n            gameStatus={stage}\n          />\n        )}\n        \n        {stage === STAGES.FINISHED && (\n            <div className=\"actions-area\">\n                <button className=\"btn-action btn-primary\" onClick={handlePlayAgain}>\n                    再来一局\n                </button>\n            </div>\n        )}\n\n      </div>\n    </div>\n  );\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CACzB,OAASC,YAAY,CAAEC,MAAM,KAAQ,gBAAgB,CACrD,OAASC,UAAU,CAAEC,WAAW,KAAQ,oBAAoB,CAC5D,MAAO,YAAY,CAEnB;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,cAAe,SAAS,CAAAC,IAAIA,CAAA,CAAG,CAC7B,KAAM,CAAAC,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAC9B;AACA,KAAM,CAAEa,KAAK,CAAEC,OAAO,CAAEC,OAAO,CAAEC,QAAQ,CAAEC,YAAY,CAAEC,eAAgB,CAAC,CAAGf,YAAY,CAAC,CAAC,CAE3F;AACAJ,SAAS,CAAC,IAAM,CACd,KAAM,CAAAoB,IAAI,CAAGd,UAAU,CAAC,CAAC,CACzB,KAAM,CAAAe,QAAQ,CAAGd,WAAW,CAACa,IAAI,CAAC,CAElC;AACA,KAAM,CAAAE,KAAK,CAAG,CACZD,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CACrBF,QAAQ,CAACE,KAAK,CAAC,EAAE,CAAE,EAAE,CAAC,CACtBF,QAAQ,CAACE,KAAK,CAAC,EAAE,CAAE,EAAE,CAAC,CACtBF,QAAQ,CAACE,KAAK,CAAC,EAAE,CAAE,EAAE,CAAC,CACvB,CACDL,YAAY,CAACI,KAAK,CAAC,CACrB,CAAC,CAAE,CAACJ,YAAY,CAAC,CAAC,CAElB;AACF;AACA;AACA,KACE,KAAM,CAAAM,YAAY,CAAG,KAAO,CAAAC,YAAY,EAAK,CAC3CR,QAAQ,CAACZ,MAAM,CAACqB,SAAS,CAAC,CAC1BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEH,YAAY,CAAC,CAEhD;AACA,KAAM,CAAAI,OAAO,CAAGd,OAAO,CAACe,GAAG,CAACC,MAAM,EAAI,CACpC,GAAIA,MAAM,CAACC,EAAE,GAAK,SAAS,CAAE,CAAE;AAC7B,MAAO,CAAEA,EAAE,CAAED,MAAM,CAACC,EAAE,CAAEV,KAAK,CAAEG,YAAa,CAAC,CAC/C,CAAC,IAAM,CACL;AACA;AACA,MAAO,CACLO,EAAE,CAAED,MAAM,CAACC,EAAE,CACbV,KAAK,CAAE,CACLW,IAAI,CAAEF,MAAM,CAACG,KAAK,CAACX,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAC9BY,MAAM,CAAEJ,MAAM,CAACG,KAAK,CAACX,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAChCa,IAAI,CAAEL,MAAM,CAACG,KAAK,CAACX,KAAK,CAAC,CAAC,CAAE,EAAE,CAChC,CACF,CAAC,CACH,CACF,CAAC,CAAC,CAEFI,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAES,IAAI,CAACC,SAAS,CAACT,OAAO,CAAE,IAAI,CAAE,CAAC,CAAC,CAAC,CAEpE,GAAI,CACF;AACA,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,kCAAkC,CAAE,CAC/DC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEN,IAAI,CAACC,SAAS,CAACT,OAAO,CAC9B,CAAC,CAAC,CAEF,GAAI,CAACU,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAC,KAAK,CAACF,SAAS,CAACG,KAAK,EAAI,4BAA4B,CAAC,CAClE,CAEA,KAAM,CAAAC,OAAO,CAAG,KAAM,CAAAV,QAAQ,CAACO,IAAI,CAAC,CAAC,CACrCnB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEqB,OAAO,CAAC,CAEtD;AACA9B,eAAe,CAAC8B,OAAO,CAAC,CAE1B,CAAE,MAAOD,KAAK,CAAE,CACdrB,OAAO,CAACqB,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C;AACA/B,QAAQ,CAACZ,MAAM,CAAC6C,OAAO,CAAC,CAC1B,CACF,CAAC,CAED,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B;AACA,KAAM,CAAA/B,IAAI,CAAGd,UAAU,CAAC,CAAC,CACzB,KAAM,CAAAe,QAAQ,CAAGd,WAAW,CAACa,IAAI,CAAC,CAClC,KAAM,CAAAE,KAAK,CAAG,CACZD,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CACrBF,QAAQ,CAACE,KAAK,CAAC,EAAE,CAAE,EAAE,CAAC,CACtBF,QAAQ,CAACE,KAAK,CAAC,EAAE,CAAE,EAAE,CAAC,CACtBF,QAAQ,CAACE,KAAK,CAAC,EAAE,CAAE,EAAE,CAAC,CACvB,CACDL,YAAY,CAACI,KAAK,CAAC,CACrB,CAAC,CAED,mBACEb,IAAA,QAAK2C,SAAS,CAAC,gBAAgB,CAAAC,QAAA,cAC7B1C,KAAA,QAAKyC,SAAS,CAAC,cAAc,CAAAC,QAAA,eAC3B1C,KAAA,QAAKyC,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1B5C,IAAA,WAAQ2C,SAAS,CAAC,UAAU,CAACE,OAAO,CAAEA,CAAA,GAAMzC,QAAQ,CAAC,GAAG,CAAE,CAAAwC,QAAA,CAAC,4BAE3D,CAAQ,CAAC,cACT5C,IAAA,QAAK2C,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAChCvC,KAAK,CAACyC,WAAW,CAAC,CAAC,CACjB,CAAC,EACH,CAAC,cAEN9C,IAAA,CAACP,SAAS,EAACa,OAAO,CAAEA,OAAQ,CAACyC,MAAM,CAAE1C,KAAM,CAAE,CAAC,CAE7CA,KAAK,GAAKT,MAAM,CAACoD,QAAQ,eACxBhD,IAAA,CAACN,IAAI,EACH+B,KAAK,CAAElB,OAAQ,CACf0C,QAAQ,CAAElC,YAAa,CACvBmC,UAAU,CAAE7C,KAAM,CACnB,CACF,CAEAA,KAAK,GAAKT,MAAM,CAACoD,QAAQ,eACtBhD,IAAA,QAAK2C,SAAS,CAAC,cAAc,CAAAC,QAAA,cACzB5C,IAAA,WAAQ2C,SAAS,CAAC,wBAAwB,CAACE,OAAO,CAAEH,eAAgB,CAAAE,QAAA,CAAC,0BAErE,CAAQ,CAAC,CACR,CACR,EAEE,CAAC,CACH,CAAC,CAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}