{"ast":null,"code":"// frontend/src/game-logic/thirteen-water-rules.js\n// 辅助函数：将牌按大小排序\nfunction sortCards(cards){const rankOrder=['2','3','4','5','6','7','8','9','10','jack','queen','king','ace'];return cards.slice().sort((a,b)=>{return rankOrder.indexOf(a.rank)-rankOrder.indexOf(b.rank);});}// 辅助函数：计算牌点出现的次数\nfunction getRankCounts(hand){const counts={};for(const card of hand){counts[card.rank]=(counts[card.rank]||0)+1;}return counts;}// 辅助函数：获取牌点的大小值\nfunction getRankValue(rank){const rankOrder=['2','3','4','5','6','7','8','9','10','jack','queen','king','ace','black_joker','red_joker'];return rankOrder.indexOf(rank);}// 牌型判断函数\n// 判断是否是对子\nexport function isPair(hand){if(hand.length!==2)return false;return hand[0].rank===hand[1].rank;}// 判断是否是三条\nexport function isThreeOfAKind(hand){if(hand.length!==3)return false;const counts=getRankCounts(hand);return Object.values(counts).some(count=>count===3);}// 判断是否是顺子 (考虑A23等特殊情况)\nexport function isStraight(hand){if(hand.length<5)return false;const sortedHand=sortCards(hand);const rankOrder=['2','3','4','5','6','7','8','9','10','jack','queen','king','ace'];const ranks=sortedHand.map(card=>card.rank);const isA2345=JSON.stringify(ranks)===JSON.stringify(['2','3','4','5','ace']);if(isA2345)return true;const rankCounts=getRankCounts(sortedHand);if(Object.values(rankCounts).some(count=>count>1)){return false;}for(let i=0;i<sortedHand.length-1;i++){if(rankOrder.indexOf(sortedHand[i+1].rank)!==rankOrder.indexOf(sortedHand[i].rank)+1){return false;}}return true;}// 判断是否是同花\nexport function isFlush(hand){if(hand.length<5)return false;const firstSuit=hand[0].suit;for(let i=1;i<hand.length;i++){if(hand[i].suit!==firstSuit){return false;}}return true;}// 判断是否是两对\nexport function isTwoPair(hand){if(hand.length!==5)return false;const counts=getRankCounts(hand);const pairs=Object.values(counts).filter(count=>count===2);return pairs.length===2;}// 判断是否是葫芦 (三条带一对)\nexport function isFullHouse(hand){if(hand.length!==5)return false;const counts=getRankCounts(hand);const hasThree=Object.values(counts).some(count=>count===3);const hasPair=Object.values(counts).some(count=>count===2);return hasThree&&hasPair;}// 判断是否是四条\nexport function isFourOfAKind(hand){if(hand.length!==5)return false;const counts=getRankCounts(hand);return Object.values(counts).some(count=>count===4);}// 判断是否是同花顺\nexport function isStraightFlush(hand){if(hand.length<5)return false;return isStraight(hand)&&isFlush(hand);}// 判断是否是五同 (考虑大小王)\nexport function isFiveOfAKind(hand){if(hand.length!==5)return false;const counts=getRankCounts(hand);const hasJoker=(counts['black_joker']||0)+(counts['red_joker']||0)>0;if(hasJoker){const nonJokerCards=hand.filter(card=>card.rank!=='black_joker'&&card.rank!=='red_joker');if(nonJokerCards.length===4){const nonJokerCounts=getRankCounts(nonJokerCards);return Object.values(nonJokerCounts).some(count=>count===4);}else if(nonJokerCards.length===3){const nonJokerCounts=getRankCounts(nonJokerCards);return Object.values(nonJokerCounts).some(count=>count===3);}else if(nonJokerCards.length===2){const nonJokerCounts=getRankCounts(nonJokerCards);return Object.values(nonJokerCounts).some(count=>count===2);}else if(nonJokerCards.length===1){return true;}}else{return Object.values(counts).some(count=>count===5);}return false;}// 判断是否是三同花顺\nexport function isThreeStraightFlush(hands){return hands.front.length===3&&hands.middle.length===5&&hands.back.length===5&&isStraightFlush(hands.front)&&isStraightFlush(hands.middle)&&isStraightFlush(hands.back);}// 判断是否是三分天下 (三个四条)\nexport function isThreeFourOfAKind(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;const counts=getRankCounts(allCards);const fourOfAKindRanks=Object.keys(counts).filter(rank=>counts[rank]===4);return fourOfAKindRanks.length===3;}// 判断是否是四套三条 (四个三条)\nexport function isFourThreeOfAKind(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;const counts=getRankCounts(allCards);const threeOfAKindRanks=Object.keys(counts).filter(rank=>counts[rank]===3);return threeOfAKindRanks.length===4;}// 判断是否是六对半 (六个对子加一张单牌)\nexport function isSixPairsAndASingle(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;const counts=getRankCounts(allCards);const pairs=Object.values(counts).filter(count=>count===2);const singles=Object.values(counts).filter(count=>count===1);return pairs.length===6&&singles.length===1;}// 判断是否是五对三条 (五个对子加一个三条)\nexport function isFivePairsAndThreeOfAKind(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;const counts=getRankCounts(allCards);const pairs=Object.values(counts).filter(count=>count===2);const threes=Object.values(counts).filter(count=>count===3);return pairs.length===5&&threes.length===1;}// 判断是否是凑一色 (全部是红色牌或全部是黑色牌)\nexport function isFlushColor(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;const isRedFlush=allCards.every(card=>card.suit==='hearts'||card.suit==='diamonds'||card.suit==='red_joker');const isBlackFlush=allCards.every(card=>card.suit==='clubs'||card.suit==='spades'||card.suit==='black_joker');return isRedFlush||isBlackFlush;}// 判断是否是全大 (所有牌都在8点或以上)\nexport function isAllBig(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;const bigRanks=['8','9','10','jack','queen','king','ace'];// 不包含大小王\nreturn allCards.every(card=>getRankValue(card.rank)>=getRankValue('8')||card.rank==='black_joker'||card.rank==='red_joker');}// 判断是否是全小 (所有牌都在8点以下)\nexport function isAllSmall(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;const smallRanks=['2','3','4','5','6','7'];return allCards.every(card=>smallRanks.includes(card.rank));}// 判断是否是一条龙 (A到K的顺子)\nexport function isDragon(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;const sortedCards=sortCards(allCards);const rankOrder=['2','3','4','5','6','7','8','9','10','jack','queen','king','ace'];for(let i=0;i<sortedCards.length-1;i++){if(rankOrder.indexOf(sortedCards[i+1].rank)!==rankOrder.indexOf(sortedCards[i].rank)+1){return false;}}return true;}// 判断是否是至尊清龙 (十三张不同花色的A到K的顺子)\nexport function isSupremeDragon(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;const sortedCards=sortCards(allCards);const rankOrder=['2','3','4','5','6','7','8','9','10','jack','queen','king','ace'];// 检查是否是A到K的顺子\nfor(let i=0;i<sortedCards.length;i++){if(getRankValue(sortedCards[i].rank)!==getRankValue(rankOrder[i])){return false;}}// 检查花色是否都不同\nconst suits=new Set(allCards.map(card=>card.suit));return suits.size===13;// 需要13种不同的花色 (实际上只有4种花色，这个判断是错误的)\n// 至尊清龙应该是不同花色的A到K，所以只需要检查是不是A到K的顺子，并且没有同花色的牌点重复\n// 修正判断逻辑：检查是否是A到K的顺子，并且每个牌点只有一个花色\nconst suitCounts={};for(const card of allCards){suitCounts[card.rank]=(suitCounts[card.rank]||0)+1;}return Object.values(suitCounts).every(count=>count===1)&&isDragon(hands);// 检查每个牌点数量是1且是一条龙\n}// 判断是否是十二皇族 (任意十二张人头牌)\nexport function isTwelveRoyals(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;const royalRanks=['jack','queen','king','ace'];// 皇族牌点 (通常包含A)\nconst royalCards=allCards.filter(card=>royalRanks.includes(card.rank));return royalCards.length===12;// 必须有12张皇族牌\n}// 判断是否是三同花 (前中后三墩都是同花)\nexport function isThreeFlush(hands){return hands.front.length===3&&hands.middle.length===5&&hands.back.length===5&&isFlush(hands.front)&&isFlush(hands.middle)&&isFlush(hands.back);}// 判断是否是三顺子 (前中后三墩都是顺子)\nexport function isThreeStraight(hands){return hands.front.length===3&&hands.middle.length===5&&hands.back.length===5&&isStraight(hands.front)&&isStraight(hands.middle)&&isStraight(hands.back);}// 判断是否是十三张 (同花顺>四条>葫芦>...)\nexport function isThirteenCards(hands){const allCards=[...hands.front,...hands.middle,...hands.back];if(allCards.length!==13)return false;// 按优先级从高到低判断十三张牌型\nif(isSupremeDragon(hands))return true;// 至尊清龙最高\nif(isThreeStraightFlush(hands))return true;if(isThreeFourOfAKind(hands))return true;if(isFourThreeOfAKind(hands))return true;if(isSixPairsAndASingle(hands))return true;if(isFivePairsAndThreeOfAKind(hands))return true;if(isFlushColor(hands))return true;if(isAllBig(hands))return true;if(isAllSmall(hands))return true;if(isDragon(hands))return true;// 普通一条龙\nif(isTwelveRoyals(hands))return true;// 十二皇族\nif(isThreeFlush(hands))return true;// 三同花\nif(isThreeStraight(hands))return true;// 三顺子\n// TODO: 添加其他十三张牌型的判断\nreturn false;}// 计算特殊牌型的得分倍数\nfunction getSpecialHandMultiplier(hands){// 按优先级从高到低返回倍数\nif(isSupremeDragon(hands))return 26;// 至尊清龙示例倍数\nif(isThreeStraightFlush(hands))return 20;if(isThreeFourOfAKind(hands))return 16;if(isFourThreeOfAKind(hands))return 13;if(isSixPairsAndASingle(hands))return 6;if(isFivePairsAndThreeOfAKind(hands))return 5;if(isFlushColor(hands))return 4;if(isAllBig(hands))return 3;if(isAllSmall(hands))return 3;if(isDragon(hands))return 10;if(isTwelveRoyals(hands))return 12;// 十二皇族示例倍数\nif(isThreeFlush(hands))return 3;// 三同花示例倍数\nif(isThreeStraight(hands))return 3;// 三顺子示例倍数\nreturn 0;}// 计算两个玩家之间的得分\n// player1Hands: { front: [], middle: [], back: [] }\n// player2Hands: { front: [], middle: [], back: [] }\n// 返回值: player1 相对于 player2 的得分\nexport function calculateScore(player1Hands,player2Hands){let score=0;// 检查特殊牌型\nconst player1SpecialMultiplier=getSpecialHandMultiplier(player1Hands);const player2SpecialMultiplier=getSpecialHandMultiplier(player2Hands);if(player1SpecialMultiplier>0||player2SpecialMultiplier>0){if(player1SpecialMultiplier>player2SpecialMultiplier){return player1SpecialMultiplier;}else if(player2SpecialMultiplier>player1SpecialMultiplier){return-player2SpecialMultiplier;}else{// 双方有相同特殊牌型，这里简化处理为平局\nreturn 0;}}// 如果没有特殊牌型，按墩计算得分\nconst frontComparison=compareHands(player1Hands.front,player2Hands.front);if(frontComparison>0){score+=1;}else if(frontComparison<0){score-=1;}const middleComparison=compareHands(player1Hands.middle,player2Hands.middle);if(middleComparison>0){score+=2;}else if(middleComparison<0){score-=2;}const backComparison=compareHands(player1Hands.back,player2Hands.back);if(backComparison>0){score+=1;}else if(backComparison<0){score-=1;}return score;}// 简易AI：尝试为手牌找到一个合理的前、中、后墩组合\nexport function simpleAI(cards){const sortedCards=sortCards(cards);let remainingCards=[...sortedCards];const front=[];const middle=[];const back=[];// 尝试组成牌型并分配到墩，优先考虑大的牌型和后面的墩\n// 尝试在后墩找同花顺 (5张)\nlet foundBack=false;for(let i=0;i<=remainingCards.length-5;i++){const potentialHand=remainingCards.slice(i,i+5);if(isStraightFlush(potentialHand)){back.push(...potentialHand);remainingCards.splice(i,5);foundBack=true;break;}}// 尝试在后墩找四条 (5张)\nif(!foundBack){for(let i=0;i<=remainingCards.length-5;i++){const potentialHand=remainingCards.slice(i,i+5);if(isFourOfAKind(potentialHand)){back.push(...potentialHand);remainingCards.splice(i,5);foundBack=true;break;}}}// 尝试在中墩找葫芦 (5张)\nlet foundMiddle=false;for(let i=0;i<=remainingCards.length-5;i++){const potentialHand=remainingCards.slice(i,i+5);if(isFullHouse(potentialHand)){middle.push(...potentialHand);remainingCards.splice(i,5);foundMiddle=true;break;}}// 尝试在后墩找同花 (5张)\nif(!foundBack){for(let i=0;i<=remainingCards.length-5;i++){const potentialHand=remainingCards.slice(i,i+5);if(isFlush(potentialHand)){back.push(...potentialHand);remainingCards.splice(i,5);foundBack=true;break;}}}// 尝试在中墩找顺子 (5张)\nif(!foundMiddle){for(let i=0;i<=remainingCards.length-5;i++){const potentialHand=remainingCards.slice(i,i+5);if(isStraight(potentialHand)){middle.push(...potentialHand);remainingCards.splice(i,5);foundMiddle=true;break;}}}// 尝试在前墩找三条 (3张)\nlet foundFront=false;for(let i=0;i<=remainingCards.length-3;i++){const potentialHand=remainingCards.slice(i,i+3);if(isThreeOfAKind(potentialHand)){front.push(...potentialHand);remainingCards.splice(i,3);foundFront=true;break;}}// 尝试在前墩找对子 (2张) -- 前墩只有3张牌，所以不能直接找对子+单张，需要组合\nif(!foundFront&&remainingCards.length>=2){// 遍历所有可能的两张牌组合，看看是否是对子\nfor(let i=0;i<=remainingCards.length-2;i++){const potentialPair=remainingCards.slice(i,i+2);if(isPair(potentialPair)){front.push(...potentialPair);remainingCards.splice(i,2);foundFront=true;break;}}// 如果找到了对子，再从剩余牌中找一张作为前墩的第三张牌\nif(foundFront&&remainingCards.length>0){front.push(remainingCards.pop());}}// 将剩余的牌分配到未满的墩\nwhile(back.length<5&&remainingCards.length>0){back.push(remainingCards.pop());}while(middle.length<5&&remainingCards.length>0){middle.push(remainingCards.pop());}while(front.length<3&&remainingCards.length>0){front.push(remainingCards.pop());}// 确保墩的牌数正确，如果不正确，进行随机分配\nif(front.length!==3||middle.length!==5||back.length!==5){const shuffledOriginal=shuffleDeck(cards);return{front:shuffledOriginal.slice(0,3),middle:shuffledOriginal.slice(3,8),back:shuffledOriginal.slice(8,13)};}return{front,middle,back};}","map":{"version":3,"names":["sortCards","cards","rankOrder","slice","sort","a","b","indexOf","rank","getRankCounts","hand","counts","card","getRankValue","isPair","length","isThreeOfAKind","Object","values","some","count","isStraight","sortedHand","ranks","map","isA2345","JSON","stringify","rankCounts","i","isFlush","firstSuit","suit","isTwoPair","pairs","filter","isFullHouse","hasThree","hasPair","isFourOfAKind","isStraightFlush","isFiveOfAKind","hasJoker","nonJokerCards","nonJokerCounts","isThreeStraightFlush","hands","front","middle","back","isThreeFourOfAKind","allCards","fourOfAKindRanks","keys","isFourThreeOfAKind","threeOfAKindRanks","isSixPairsAndASingle","singles","isFivePairsAndThreeOfAKind","threes","isFlushColor","isRedFlush","every","isBlackFlush","isAllBig","bigRanks","isAllSmall","smallRanks","includes","isDragon","sortedCards","isSupremeDragon","suits","Set","size","suitCounts","isTwelveRoyals","royalRanks","royalCards","isThreeFlush","isThreeStraight","isThirteenCards","getSpecialHandMultiplier","calculateScore","player1Hands","player2Hands","score","player1SpecialMultiplier","player2SpecialMultiplier","frontComparison","compareHands","middleComparison","backComparison","simpleAI","remainingCards","foundBack","potentialHand","push","splice","foundMiddle","foundFront","potentialPair","pop","shuffledOriginal","shuffleDeck"],"sources":["/home/user/ssk/frontend/src/game-logic/thirteen-water-rules.js"],"sourcesContent":["// frontend/src/game-logic/thirteen-water-rules.js\n\n// 辅助函数：将牌按大小排序\nfunction sortCards(cards) {\n    const rankOrder = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace'];\n    return cards.slice().sort((a, b) => {\n        return rankOrder.indexOf(a.rank) - rankOrder.indexOf(b.rank);\n    });\n}\n\n// 辅助函数：计算牌点出现的次数\nfunction getRankCounts(hand) {\n    const counts = {};\n    for (const card of hand) {\n        counts[card.rank] = (counts[card.rank] || 0) + 1;\n    }\n    return counts;\n}\n\n// 辅助函数：获取牌点的大小值\nfunction getRankValue(rank) {\n    const rankOrder = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace', 'black_joker', 'red_joker'];\n    return rankOrder.indexOf(rank);\n}\n\n// 牌型判断函数\n\n// 判断是否是对子\nexport function isPair(hand) {\n    if (hand.length !== 2) return false; \n    return hand[0].rank === hand[1].rank;\n}\n\n// 判断是否是三条\nexport function isThreeOfAKind(hand) {\n    if (hand.length !== 3) return false; \n    const counts = getRankCounts(hand);\n    return Object.values(counts).some(count => count === 3);\n}\n\n// 判断是否是顺子 (考虑A23等特殊情况)\nexport function isStraight(hand) {\n    if (hand.length < 5) return false; \n    const sortedHand = sortCards(hand);\n    const rankOrder = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace'];\n\n    const ranks = sortedHand.map(card => card.rank);\n    const isA2345 = JSON.stringify(ranks) === JSON.stringify(['2', '3', '4', '5', 'ace']);\n\n    if (isA2345) return true; \n\n    const rankCounts = getRankCounts(sortedHand);\n    if (Object.values(rankCounts).some(count => count > 1)) {\n        return false;\n    }\n\n    for (let i = 0; i < sortedHand.length - 1; i++) {\n        if (rankOrder.indexOf(sortedHand[i + 1].rank) !== rankOrder.indexOf(sortedHand[i].rank) + 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// 判断是否是同花\nexport function isFlush(hand) {\n    if (hand.length < 5) return false; \n    const firstSuit = hand[0].suit;\n    for (let i = 1; i < hand.length; i++) {\n        if (hand[i].suit !== firstSuit) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// 判断是否是两对\nexport function isTwoPair(hand) {\n    if (hand.length !== 5) return false; \n    const counts = getRankCounts(hand);\n    const pairs = Object.values(counts).filter(count => count === 2);\n    return pairs.length === 2; \n}\n\n// 判断是否是葫芦 (三条带一对)\nexport function isFullHouse(hand) {\n    if (hand.length !== 5) return false; \n    const counts = getRankCounts(hand);\n    const hasThree = Object.values(counts).some(count => count === 3);\n    const hasPair = Object.values(counts).some(count => count === 2);\n    return hasThree && hasPair;\n}\n\n// 判断是否是四条\nexport function isFourOfAKind(hand) {\n    if (hand.length !== 5) return false; \n    const counts = getRankCounts(hand);\n    return Object.values(counts).some(count => count === 4);\n}\n\n// 判断是否是同花顺\nexport function isStraightFlush(hand) {\n    if (hand.length < 5) return false; \n    return isStraight(hand) && isFlush(hand);\n}\n\n// 判断是否是五同 (考虑大小王)\nexport function isFiveOfAKind(hand) {\n    if (hand.length !== 5) return false; \n    const counts = getRankCounts(hand);\n    const hasJoker = (counts['black_joker'] || 0) + (counts['red_joker'] || 0) > 0;\n\n    if (hasJoker) {\n        const nonJokerCards = hand.filter(card => card.rank !== 'black_joker' && card.rank !== 'red_joker');\n        if (nonJokerCards.length === 4) {\n            const nonJokerCounts = getRankCounts(nonJokerCards);\n            return Object.values(nonJokerCounts).some(count => count === 4);\n        } else if (nonJokerCards.length === 3) {\n            const nonJokerCounts = getRankCounts(nonJokerCards);\n            return Object.values(nonJokerCounts).some(count => count === 3);\n        } else if (nonJokerCards.length === 2) {\n            const nonJokerCounts = getRankCounts(nonJokerCards);\n            return Object.values(nonJokerCounts).some(count => count === 2);\n        } else if (nonJokerCards.length === 1) {\n            return true;\n        }\n\n    } else {\n        return Object.values(counts).some(count => count === 5);\n    }\n\n    return false;\n}\n\n// 判断是否是三同花顺\nexport function isThreeStraightFlush(hands) {\n    return hands.front.length === 3 && hands.middle.length === 5 && hands.back.length === 5 &&\n           isStraightFlush(hands.front) && isStraightFlush(hands.middle) && isStraightFlush(hands.back);\n}\n\n// 判断是否是三分天下 (三个四条)\nexport function isThreeFourOfAKind(hands) {\n    const allCards = [...hands.front, ...hands.middle, ...hands.back];\n    if (allCards.length !== 13) return false;\n\n    const counts = getRankCounts(allCards);\n    const fourOfAKindRanks = Object.keys(counts).filter(rank => counts[rank] === 4);\n\n    return fourOfAKindRanks.length === 3; \n}\n\n// 判断是否是四套三条 (四个三条)\nexport function isFourThreeOfAKind(hands) {\n    const allCards = [...hands.front, ...hands.middle, ...hands.back];\n    if (allCards.length !== 13) return false;\n\n    const counts = getRankCounts(allCards);\n    const threeOfAKindRanks = Object.keys(counts).filter(rank => counts[rank] === 3);\n\n    return threeOfAKindRanks.length === 4;\n}\n\n// 判断是否是六对半 (六个对子加一张单牌)\nexport function isSixPairsAndASingle(hands) { \n    const allCards = [...hands.front, ...hands.middle, ...hands.back];\n    if (allCards.length !== 13) return false;\n\n    const counts = getRankCounts(allCards);\n    const pairs = Object.values(counts).filter(count => count === 2);\n    const singles = Object.values(counts).filter(count => count === 1);\n\n    return pairs.length === 6 && singles.length === 1;\n}\n\n// 判断是否是五对三条 (五个对子加一个三条)\nexport function isFivePairsAndThreeOfAKind(hands) {\n     const allCards = [...hands.front, ...hands.middle, ...hands.back];\n    if (allCards.length !== 13) return false;\n\n    const counts = getRankCounts(allCards);\n    const pairs = Object.values(counts).filter(count => count === 2);\n    const threes = Object.values(counts).filter(count => count === 3);\n\n    return pairs.length === 5 && threes.length === 1;\n}\n\n// 判断是否是凑一色 (全部是红色牌或全部是黑色牌)\nexport function isFlushColor(hands) {\n     const allCards = [...hands.front, ...hands.middle, ...hands.back];\n     if (allCards.length !== 13) return false;\n\n     const isRedFlush = allCards.every(card => card.suit === 'hearts' || card.suit === 'diamonds' || card.suit === 'red_joker');\n     const isBlackFlush = allCards.every(card => card.suit === 'clubs' || card.suit === 'spades' || card.suit === 'black_joker');\n\n     return isRedFlush || isBlackFlush;\n}\n\n// 判断是否是全大 (所有牌都在8点或以上)\nexport function isAllBig(hands) {\n    const allCards = [...hands.front, ...hands.middle, ...hands.back];\n    if (allCards.length !== 13) return false;\n\n    const bigRanks = ['8', '9', '10', 'jack', 'queen', 'king', 'ace']; // 不包含大小王\n    return allCards.every(card => getRankValue(card.rank) >= getRankValue('8') || card.rank === 'black_joker' || card.rank === 'red_joker');\n}\n\n// 判断是否是全小 (所有牌都在8点以下)\nexport function isAllSmall(hands) {\n     const allCards = [...hands.front, ...hands.middle, ...hands.back];\n    if (allCards.length !== 13) return false;\n\n    const smallRanks = ['2', '3', '4', '5', '6', '7'];\n     return allCards.every(card => smallRanks.includes(card.rank));\n}\n\n// 判断是否是一条龙 (A到K的顺子)\nexport function isDragon(hands) {\n    const allCards = [...hands.front, ...hands.middle, ...hands.back];\n    if (allCards.length !== 13) return false;\n\n    const sortedCards = sortCards(allCards);\n    const rankOrder = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace'];\n\n     for (let i = 0; i < sortedCards.length - 1; i++) {\n        if (rankOrder.indexOf(sortedCards[i + 1].rank) !== rankOrder.indexOf(sortedCards[i].rank) + 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// 判断是否是至尊清龙 (十三张不同花色的A到K的顺子)\nexport function isSupremeDragon(hands) {\n    const allCards = [...hands.front, ...hands.middle, ...hands.back];\n    if (allCards.length !== 13) return false;\n\n    const sortedCards = sortCards(allCards);\n    const rankOrder = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace'];\n\n    // 检查是否是A到K的顺子\n    for (let i = 0; i < sortedCards.length; i++) {\n        if (getRankValue(sortedCards[i].rank) !== getRankValue(rankOrder[i])) {\n            return false;\n        }\n    }\n\n    // 检查花色是否都不同\n    const suits = new Set(allCards.map(card => card.suit));\n    return suits.size === 13; // 需要13种不同的花色 (实际上只有4种花色，这个判断是错误的)\n    // 至尊清龙应该是不同花色的A到K，所以只需要检查是不是A到K的顺子，并且没有同花色的牌点重复\n    // 修正判断逻辑：检查是否是A到K的顺子，并且每个牌点只有一个花色\n     const suitCounts = {};\n     for(const card of allCards) {\n         suitCounts[card.rank] = (suitCounts[card.rank] || 0) + 1;\n     }\n     return Object.values(suitCounts).every(count => count === 1) && isDragon(hands); // 检查每个牌点数量是1且是一条龙\n}\n\n// 判断是否是十二皇族 (任意十二张人头牌)\nexport function isTwelveRoyals(hands) {\n    const allCards = [...hands.front, ...hands.middle, ...hands.back];\n    if (allCards.length !== 13) return false;\n\n    const royalRanks = ['jack', 'queen', 'king', 'ace']; // 皇族牌点 (通常包含A)\n    const royalCards = allCards.filter(card => royalRanks.includes(card.rank));\n\n    return royalCards.length === 12; // 必须有12张皇族牌\n}\n\n// 判断是否是三同花 (前中后三墩都是同花)\nexport function isThreeFlush(hands) {\n    return hands.front.length === 3 && hands.middle.length === 5 && hands.back.length === 5 &&\n           isFlush(hands.front) && isFlush(hands.middle) && isFlush(hands.back);\n}\n\n// 判断是否是三顺子 (前中后三墩都是顺子)\nexport function isThreeStraight(hands) {\n    return hands.front.length === 3 && hands.middle.length === 5 && hands.back.length === 5 &&\n           isStraight(hands.front) && isStraight(hands.middle) && isStraight(hands.back);\n}\n\n// 判断是否是十三张 (同花顺>四条>葫芦>...)\nexport function isThirteenCards(hands) {\n    const allCards = [...hands.front, ...hands.middle, ...hands.back];\n    if (allCards.length !== 13) return false;\n\n    // 按优先级从高到低判断十三张牌型\n    if (isSupremeDragon(hands)) return true; // 至尊清龙最高\n    if (isThreeStraightFlush(hands)) return true;\n    if (isThreeFourOfAKind(hands)) return true; \n    if (isFourThreeOfAKind(hands)) return true;\n    if (isSixPairsAndASingle(hands)) return true;\n    if (isFivePairsAndThreeOfAKind(hands)) return true;\n    if (isFlushColor(hands)) return true;\n    if (isAllBig(hands)) return true;\n    if (isAllSmall(hands)) return true;\n    if (isDragon(hands)) return true; // 普通一条龙\n    if (isTwelveRoyals(hands)) return true; // 十二皇族\n     if (isThreeFlush(hands)) return true; // 三同花\n     if (isThreeStraight(hands)) return true; // 三顺子\n    // TODO: 添加其他十三张牌型的判断\n\n    return false;\n}\n\n// 计算特殊牌型的得分倍数\nfunction getSpecialHandMultiplier(hands) {\n     // 按优先级从高到低返回倍数\n    if (isSupremeDragon(hands)) return 26; // 至尊清龙示例倍数\n    if (isThreeStraightFlush(hands)) return 20; \n    if (isThreeFourOfAKind(hands)) return 16; \n    if (isFourThreeOfAKind(hands)) return 13; \n    if (isSixPairsAndASingle(hands)) return 6; \n    if (isFivePairsAndThreeOfAKind(hands)) return 5; \n    if (isFlushColor(hands)) return 4; \n    if (isAllBig(hands)) return 3; \n    if (isAllSmall(hands)) return 3; \n    if (isDragon(hands)) return 10; \n    if (isTwelveRoyals(hands)) return 12; // 十二皇族示例倍数\n    if (isThreeFlush(hands)) return 3; // 三同花示例倍数\n    if (isThreeStraight(hands)) return 3; // 三顺子示例倍数\n\n    return 0; \n}\n\n// 计算两个玩家之间的得分\n// player1Hands: { front: [], middle: [], back: [] }\n// player2Hands: { front: [], middle: [], back: [] }\n// 返回值: player1 相对于 player2 的得分\nexport function calculateScore(player1Hands, player2Hands) {\n    let score = 0;\n\n    // 检查特殊牌型\n    const player1SpecialMultiplier = getSpecialHandMultiplier(player1Hands);\n    const player2SpecialMultiplier = getSpecialHandMultiplier(player2Hands);\n\n    if (player1SpecialMultiplier > 0 || player2SpecialMultiplier > 0) {\n        if (player1SpecialMultiplier > player2SpecialMultiplier) {\n            return player1SpecialMultiplier; \n        } else if (player2SpecialMultiplier > player1SpecialMultiplier) {\n            return -player2SpecialMultiplier; \n        } else {\n            // 双方有相同特殊牌型，这里简化处理为平局\n            return 0;\n        }\n    }\n\n    // 如果没有特殊牌型，按墩计算得分\n    const frontComparison = compareHands(player1Hands.front, player2Hands.front);\n    if (frontComparison > 0) {\n        score += 1; \n    } else if (frontComparison < 0) {\n        score -= 1; \n    }\n\n    const middleComparison = compareHands(player1Hands.middle, player2Hands.middle);\n    if (middleComparison > 0) {\n        score += 2; \n    } else if (middleComparison < 0) {\n        score -= 2; \n    }\n\n    const backComparison = compareHands(player1Hands.back, player2Hands.back);\n    if (backComparison > 0) {\n        score += 1; \n    } else if (backComparison < 0) {\n        score -= 1; \n    }\n\n    return score;\n}\n\n// 简易AI：尝试为手牌找到一个合理的前、中、后墩组合\nexport function simpleAI(cards) {\n    const sortedCards = sortCards(cards); \n    let remainingCards = [...sortedCards];\n\n    const front = [];\n    const middle = [];\n    const back = [];\n\n    // 尝试组成牌型并分配到墩，优先考虑大的牌型和后面的墩\n\n    // 尝试在后墩找同花顺 (5张)\n    let foundBack = false;\n    for (let i = 0; i <= remainingCards.length - 5; i++) {\n        const potentialHand = remainingCards.slice(i, i + 5);\n        if (isStraightFlush(potentialHand)) {\n            back.push(...potentialHand);\n            remainingCards.splice(i, 5);\n            foundBack = true;\n            break;\n        }\n    }\n\n    // 尝试在后墩找四条 (5张)\n     if (!foundBack) { \n         for (let i = 0; i <= remainingCards.length - 5; i++) {\n            const potentialHand = remainingCards.slice(i, i + 5);\n            if (isFourOfAKind(potentialHand)) {\n                back.push(...potentialHand);\n                remainingCards.splice(i, 5);\n                foundBack = true;\n                break;\n            }\n        }\n     }\n\n    // 尝试在中墩找葫芦 (5张)\n    let foundMiddle = false;\n    for (let i = 0; i <= remainingCards.length - 5; i++) {\n        const potentialHand = remainingCards.slice(i, i + 5);\n        if (isFullHouse(potentialHand)) {\n            middle.push(...potentialHand);\n            remainingCards.splice(i, 5);\n            foundMiddle = true;\n            break;\n        }\n    }\n\n    // 尝试在后墩找同花 (5张)\n     if (!foundBack) { \n        for (let i = 0; i <= remainingCards.length - 5; i++) {\n            const potentialHand = remainingCards.slice(i, i + 5);\n            if (isFlush(potentialHand)) {\n                back.push(...potentialHand);\n                remainingCards.splice(i, 5);\n                foundBack = true;\n                break;\n            }\n        }\n     }\n\n    // 尝试在中墩找顺子 (5张)\n    if (!foundMiddle) { \n         for (let i = 0; i <= remainingCards.length - 5; i++) {\n            const potentialHand = remainingCards.slice(i, i + 5);\n            if (isStraight(potentialHand)) {\n                middle.push(...potentialHand);\n                remainingCards.splice(i, 5);\n                foundMiddle = true;\n                break;\n            }\n        }\n    }\n\n    // 尝试在前墩找三条 (3张)\n    let foundFront = false;\n    for (let i = 0; i <= remainingCards.length - 3; i++) {\n        const potentialHand = remainingCards.slice(i, i + 3);\n        if (isThreeOfAKind(potentialHand)) {\n            front.push(...potentialHand);\n            remainingCards.splice(i, 3);\n            foundFront = true;\n            break;\n        }\n    }\n\n     // 尝试在前墩找对子 (2张) -- 前墩只有3张牌，所以不能直接找对子+单张，需要组合\n     if (!foundFront && remainingCards.length >= 2) {\n         // 遍历所有可能的两张牌组合，看看是否是对子\n         for(let i = 0; i <= remainingCards.length - 2; i++) {\n             const potentialPair = remainingCards.slice(i, i + 2);\n             if (isPair(potentialPair)) {\n                 front.push(...potentialPair);\n                 remainingCards.splice(i, 2);\n                 foundFront = true;\n                 break;\n             }\n         }\n          // 如果找到了对子，再从剩余牌中找一张作为前墩的第三张牌\n          if (foundFront && remainingCards.length > 0) {\n              front.push(remainingCards.pop());\n          }\n     }\n\n    // 将剩余的牌分配到未满的墩\n    while (back.length < 5 && remainingCards.length > 0) {\n        back.push(remainingCards.pop());\n    }\n    while (middle.length < 5 && remainingCards.length > 0) {\n        middle.push(remainingCards.pop());\n    }\n    while (front.length < 3 && remainingCards.length > 0) {\n         front.push(remainingCards.pop());\n    }\n\n    // 确保墩的牌数正确，如果不正确，进行随机分配\n     if (front.length !== 3 || middle.length !== 5 || back.length !== 5) {\n         const shuffledOriginal = shuffleDeck(cards);\n         return {\n             front: shuffledOriginal.slice(0,3),\n             middle: shuffledOriginal.slice(3,8),\n             back: shuffledOriginal.slice(8,13),\n         };\n     }\n\n    return { front, middle, back };\n}\n"],"mappings":"AAAA;AAEA;AACA,QAAS,CAAAA,SAASA,CAACC,KAAK,CAAE,CACtB,KAAM,CAAAC,SAAS,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,IAAI,CAAE,MAAM,CAAE,OAAO,CAAE,MAAM,CAAE,KAAK,CAAC,CAChG,MAAO,CAAAD,KAAK,CAACE,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,CAChC,MAAO,CAAAJ,SAAS,CAACK,OAAO,CAACF,CAAC,CAACG,IAAI,CAAC,CAAGN,SAAS,CAACK,OAAO,CAACD,CAAC,CAACE,IAAI,CAAC,CAChE,CAAC,CAAC,CACN,CAEA;AACA,QAAS,CAAAC,aAAaA,CAACC,IAAI,CAAE,CACzB,KAAM,CAAAC,MAAM,CAAG,CAAC,CAAC,CACjB,IAAK,KAAM,CAAAC,IAAI,GAAI,CAAAF,IAAI,CAAE,CACrBC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CAAG,CAACG,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,EAAI,CAAC,EAAI,CAAC,CACpD,CACA,MAAO,CAAAG,MAAM,CACjB,CAEA;AACA,QAAS,CAAAE,YAAYA,CAACL,IAAI,CAAE,CACxB,KAAM,CAAAN,SAAS,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,IAAI,CAAE,MAAM,CAAE,OAAO,CAAE,MAAM,CAAE,KAAK,CAAE,aAAa,CAAE,WAAW,CAAC,CAC5H,MAAO,CAAAA,SAAS,CAACK,OAAO,CAACC,IAAI,CAAC,CAClC,CAEA;AAEA;AACA,MAAO,SAAS,CAAAM,MAAMA,CAACJ,IAAI,CAAE,CACzB,GAAIA,IAAI,CAACK,MAAM,GAAK,CAAC,CAAE,MAAO,MAAK,CACnC,MAAO,CAAAL,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,GAAKE,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,CACxC,CAEA;AACA,MAAO,SAAS,CAAAQ,cAAcA,CAACN,IAAI,CAAE,CACjC,GAAIA,IAAI,CAACK,MAAM,GAAK,CAAC,CAAE,MAAO,MAAK,CACnC,KAAM,CAAAJ,MAAM,CAAGF,aAAa,CAACC,IAAI,CAAC,CAClC,MAAO,CAAAO,MAAM,CAACC,MAAM,CAACP,MAAM,CAAC,CAACQ,IAAI,CAACC,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CAC3D,CAEA;AACA,MAAO,SAAS,CAAAC,UAAUA,CAACX,IAAI,CAAE,CAC7B,GAAIA,IAAI,CAACK,MAAM,CAAG,CAAC,CAAE,MAAO,MAAK,CACjC,KAAM,CAAAO,UAAU,CAAGtB,SAAS,CAACU,IAAI,CAAC,CAClC,KAAM,CAAAR,SAAS,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,IAAI,CAAE,MAAM,CAAE,OAAO,CAAE,MAAM,CAAE,KAAK,CAAC,CAEhG,KAAM,CAAAqB,KAAK,CAAGD,UAAU,CAACE,GAAG,CAACZ,IAAI,EAAIA,IAAI,CAACJ,IAAI,CAAC,CAC/C,KAAM,CAAAiB,OAAO,CAAGC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,GAAKG,IAAI,CAACC,SAAS,CAAC,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,KAAK,CAAC,CAAC,CAErF,GAAIF,OAAO,CAAE,MAAO,KAAI,CAExB,KAAM,CAAAG,UAAU,CAAGnB,aAAa,CAACa,UAAU,CAAC,CAC5C,GAAIL,MAAM,CAACC,MAAM,CAACU,UAAU,CAAC,CAACT,IAAI,CAACC,KAAK,EAAIA,KAAK,CAAG,CAAC,CAAC,CAAE,CACpD,MAAO,MAAK,CAChB,CAEA,IAAK,GAAI,CAAAS,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGP,UAAU,CAACP,MAAM,CAAG,CAAC,CAAEc,CAAC,EAAE,CAAE,CAC5C,GAAI3B,SAAS,CAACK,OAAO,CAACe,UAAU,CAACO,CAAC,CAAG,CAAC,CAAC,CAACrB,IAAI,CAAC,GAAKN,SAAS,CAACK,OAAO,CAACe,UAAU,CAACO,CAAC,CAAC,CAACrB,IAAI,CAAC,CAAG,CAAC,CAAE,CACzF,MAAO,MAAK,CAChB,CACJ,CACA,MAAO,KAAI,CACf,CAEA;AACA,MAAO,SAAS,CAAAsB,OAAOA,CAACpB,IAAI,CAAE,CAC1B,GAAIA,IAAI,CAACK,MAAM,CAAG,CAAC,CAAE,MAAO,MAAK,CACjC,KAAM,CAAAgB,SAAS,CAAGrB,IAAI,CAAC,CAAC,CAAC,CAACsB,IAAI,CAC9B,IAAK,GAAI,CAAAH,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGnB,IAAI,CAACK,MAAM,CAAEc,CAAC,EAAE,CAAE,CAClC,GAAInB,IAAI,CAACmB,CAAC,CAAC,CAACG,IAAI,GAAKD,SAAS,CAAE,CAC5B,MAAO,MAAK,CAChB,CACJ,CACA,MAAO,KAAI,CACf,CAEA;AACA,MAAO,SAAS,CAAAE,SAASA,CAACvB,IAAI,CAAE,CAC5B,GAAIA,IAAI,CAACK,MAAM,GAAK,CAAC,CAAE,MAAO,MAAK,CACnC,KAAM,CAAAJ,MAAM,CAAGF,aAAa,CAACC,IAAI,CAAC,CAClC,KAAM,CAAAwB,KAAK,CAAGjB,MAAM,CAACC,MAAM,CAACP,MAAM,CAAC,CAACwB,MAAM,CAACf,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CAChE,MAAO,CAAAc,KAAK,CAACnB,MAAM,GAAK,CAAC,CAC7B,CAEA;AACA,MAAO,SAAS,CAAAqB,WAAWA,CAAC1B,IAAI,CAAE,CAC9B,GAAIA,IAAI,CAACK,MAAM,GAAK,CAAC,CAAE,MAAO,MAAK,CACnC,KAAM,CAAAJ,MAAM,CAAGF,aAAa,CAACC,IAAI,CAAC,CAClC,KAAM,CAAA2B,QAAQ,CAAGpB,MAAM,CAACC,MAAM,CAACP,MAAM,CAAC,CAACQ,IAAI,CAACC,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CACjE,KAAM,CAAAkB,OAAO,CAAGrB,MAAM,CAACC,MAAM,CAACP,MAAM,CAAC,CAACQ,IAAI,CAACC,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CAChE,MAAO,CAAAiB,QAAQ,EAAIC,OAAO,CAC9B,CAEA;AACA,MAAO,SAAS,CAAAC,aAAaA,CAAC7B,IAAI,CAAE,CAChC,GAAIA,IAAI,CAACK,MAAM,GAAK,CAAC,CAAE,MAAO,MAAK,CACnC,KAAM,CAAAJ,MAAM,CAAGF,aAAa,CAACC,IAAI,CAAC,CAClC,MAAO,CAAAO,MAAM,CAACC,MAAM,CAACP,MAAM,CAAC,CAACQ,IAAI,CAACC,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CAC3D,CAEA;AACA,MAAO,SAAS,CAAAoB,eAAeA,CAAC9B,IAAI,CAAE,CAClC,GAAIA,IAAI,CAACK,MAAM,CAAG,CAAC,CAAE,MAAO,MAAK,CACjC,MAAO,CAAAM,UAAU,CAACX,IAAI,CAAC,EAAIoB,OAAO,CAACpB,IAAI,CAAC,CAC5C,CAEA;AACA,MAAO,SAAS,CAAA+B,aAAaA,CAAC/B,IAAI,CAAE,CAChC,GAAIA,IAAI,CAACK,MAAM,GAAK,CAAC,CAAE,MAAO,MAAK,CACnC,KAAM,CAAAJ,MAAM,CAAGF,aAAa,CAACC,IAAI,CAAC,CAClC,KAAM,CAAAgC,QAAQ,CAAG,CAAC/B,MAAM,CAAC,aAAa,CAAC,EAAI,CAAC,GAAKA,MAAM,CAAC,WAAW,CAAC,EAAI,CAAC,CAAC,CAAG,CAAC,CAE9E,GAAI+B,QAAQ,CAAE,CACV,KAAM,CAAAC,aAAa,CAAGjC,IAAI,CAACyB,MAAM,CAACvB,IAAI,EAAIA,IAAI,CAACJ,IAAI,GAAK,aAAa,EAAII,IAAI,CAACJ,IAAI,GAAK,WAAW,CAAC,CACnG,GAAImC,aAAa,CAAC5B,MAAM,GAAK,CAAC,CAAE,CAC5B,KAAM,CAAA6B,cAAc,CAAGnC,aAAa,CAACkC,aAAa,CAAC,CACnD,MAAO,CAAA1B,MAAM,CAACC,MAAM,CAAC0B,cAAc,CAAC,CAACzB,IAAI,CAACC,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CACnE,CAAC,IAAM,IAAIuB,aAAa,CAAC5B,MAAM,GAAK,CAAC,CAAE,CACnC,KAAM,CAAA6B,cAAc,CAAGnC,aAAa,CAACkC,aAAa,CAAC,CACnD,MAAO,CAAA1B,MAAM,CAACC,MAAM,CAAC0B,cAAc,CAAC,CAACzB,IAAI,CAACC,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CACnE,CAAC,IAAM,IAAIuB,aAAa,CAAC5B,MAAM,GAAK,CAAC,CAAE,CACnC,KAAM,CAAA6B,cAAc,CAAGnC,aAAa,CAACkC,aAAa,CAAC,CACnD,MAAO,CAAA1B,MAAM,CAACC,MAAM,CAAC0B,cAAc,CAAC,CAACzB,IAAI,CAACC,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CACnE,CAAC,IAAM,IAAIuB,aAAa,CAAC5B,MAAM,GAAK,CAAC,CAAE,CACnC,MAAO,KAAI,CACf,CAEJ,CAAC,IAAM,CACH,MAAO,CAAAE,MAAM,CAACC,MAAM,CAACP,MAAM,CAAC,CAACQ,IAAI,CAACC,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CAC3D,CAEA,MAAO,MAAK,CAChB,CAEA;AACA,MAAO,SAAS,CAAAyB,oBAAoBA,CAACC,KAAK,CAAE,CACxC,MAAO,CAAAA,KAAK,CAACC,KAAK,CAAChC,MAAM,GAAK,CAAC,EAAI+B,KAAK,CAACE,MAAM,CAACjC,MAAM,GAAK,CAAC,EAAI+B,KAAK,CAACG,IAAI,CAAClC,MAAM,GAAK,CAAC,EAChFyB,eAAe,CAACM,KAAK,CAACC,KAAK,CAAC,EAAIP,eAAe,CAACM,KAAK,CAACE,MAAM,CAAC,EAAIR,eAAe,CAACM,KAAK,CAACG,IAAI,CAAC,CACvG,CAEA;AACA,MAAO,SAAS,CAAAC,kBAAkBA,CAACJ,KAAK,CAAE,CACtC,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CACjE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC,KAAM,CAAAJ,MAAM,CAAGF,aAAa,CAAC0C,QAAQ,CAAC,CACtC,KAAM,CAAAC,gBAAgB,CAAGnC,MAAM,CAACoC,IAAI,CAAC1C,MAAM,CAAC,CAACwB,MAAM,CAAC3B,IAAI,EAAIG,MAAM,CAACH,IAAI,CAAC,GAAK,CAAC,CAAC,CAE/E,MAAO,CAAA4C,gBAAgB,CAACrC,MAAM,GAAK,CAAC,CACxC,CAEA;AACA,MAAO,SAAS,CAAAuC,kBAAkBA,CAACR,KAAK,CAAE,CACtC,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CACjE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC,KAAM,CAAAJ,MAAM,CAAGF,aAAa,CAAC0C,QAAQ,CAAC,CACtC,KAAM,CAAAI,iBAAiB,CAAGtC,MAAM,CAACoC,IAAI,CAAC1C,MAAM,CAAC,CAACwB,MAAM,CAAC3B,IAAI,EAAIG,MAAM,CAACH,IAAI,CAAC,GAAK,CAAC,CAAC,CAEhF,MAAO,CAAA+C,iBAAiB,CAACxC,MAAM,GAAK,CAAC,CACzC,CAEA;AACA,MAAO,SAAS,CAAAyC,oBAAoBA,CAACV,KAAK,CAAE,CACxC,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CACjE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC,KAAM,CAAAJ,MAAM,CAAGF,aAAa,CAAC0C,QAAQ,CAAC,CACtC,KAAM,CAAAjB,KAAK,CAAGjB,MAAM,CAACC,MAAM,CAACP,MAAM,CAAC,CAACwB,MAAM,CAACf,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CAChE,KAAM,CAAAqC,OAAO,CAAGxC,MAAM,CAACC,MAAM,CAACP,MAAM,CAAC,CAACwB,MAAM,CAACf,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CAElE,MAAO,CAAAc,KAAK,CAACnB,MAAM,GAAK,CAAC,EAAI0C,OAAO,CAAC1C,MAAM,GAAK,CAAC,CACrD,CAEA;AACA,MAAO,SAAS,CAAA2C,0BAA0BA,CAACZ,KAAK,CAAE,CAC7C,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CAClE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC,KAAM,CAAAJ,MAAM,CAAGF,aAAa,CAAC0C,QAAQ,CAAC,CACtC,KAAM,CAAAjB,KAAK,CAAGjB,MAAM,CAACC,MAAM,CAACP,MAAM,CAAC,CAACwB,MAAM,CAACf,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CAChE,KAAM,CAAAuC,MAAM,CAAG1C,MAAM,CAACC,MAAM,CAACP,MAAM,CAAC,CAACwB,MAAM,CAACf,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,CAEjE,MAAO,CAAAc,KAAK,CAACnB,MAAM,GAAK,CAAC,EAAI4C,MAAM,CAAC5C,MAAM,GAAK,CAAC,CACpD,CAEA;AACA,MAAO,SAAS,CAAA6C,YAAYA,CAACd,KAAK,CAAE,CAC/B,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CACjE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC,KAAM,CAAA8C,UAAU,CAAGV,QAAQ,CAACW,KAAK,CAAClD,IAAI,EAAIA,IAAI,CAACoB,IAAI,GAAK,QAAQ,EAAIpB,IAAI,CAACoB,IAAI,GAAK,UAAU,EAAIpB,IAAI,CAACoB,IAAI,GAAK,WAAW,CAAC,CAC1H,KAAM,CAAA+B,YAAY,CAAGZ,QAAQ,CAACW,KAAK,CAAClD,IAAI,EAAIA,IAAI,CAACoB,IAAI,GAAK,OAAO,EAAIpB,IAAI,CAACoB,IAAI,GAAK,QAAQ,EAAIpB,IAAI,CAACoB,IAAI,GAAK,aAAa,CAAC,CAE3H,MAAO,CAAA6B,UAAU,EAAIE,YAAY,CACtC,CAEA;AACA,MAAO,SAAS,CAAAC,QAAQA,CAAClB,KAAK,CAAE,CAC5B,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CACjE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC,KAAM,CAAAkD,QAAQ,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,IAAI,CAAE,MAAM,CAAE,OAAO,CAAE,MAAM,CAAE,KAAK,CAAC,CAAE;AACnE,MAAO,CAAAd,QAAQ,CAACW,KAAK,CAAClD,IAAI,EAAIC,YAAY,CAACD,IAAI,CAACJ,IAAI,CAAC,EAAIK,YAAY,CAAC,GAAG,CAAC,EAAID,IAAI,CAACJ,IAAI,GAAK,aAAa,EAAII,IAAI,CAACJ,IAAI,GAAK,WAAW,CAAC,CAC3I,CAEA;AACA,MAAO,SAAS,CAAA0D,UAAUA,CAACpB,KAAK,CAAE,CAC7B,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CAClE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC,KAAM,CAAAoD,UAAU,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,CAChD,MAAO,CAAAhB,QAAQ,CAACW,KAAK,CAAClD,IAAI,EAAIuD,UAAU,CAACC,QAAQ,CAACxD,IAAI,CAACJ,IAAI,CAAC,CAAC,CAClE,CAEA;AACA,MAAO,SAAS,CAAA6D,QAAQA,CAACvB,KAAK,CAAE,CAC5B,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CACjE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC,KAAM,CAAAuD,WAAW,CAAGtE,SAAS,CAACmD,QAAQ,CAAC,CACvC,KAAM,CAAAjD,SAAS,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,IAAI,CAAE,MAAM,CAAE,OAAO,CAAE,MAAM,CAAE,KAAK,CAAC,CAE/F,IAAK,GAAI,CAAA2B,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGyC,WAAW,CAACvD,MAAM,CAAG,CAAC,CAAEc,CAAC,EAAE,CAAE,CAC9C,GAAI3B,SAAS,CAACK,OAAO,CAAC+D,WAAW,CAACzC,CAAC,CAAG,CAAC,CAAC,CAACrB,IAAI,CAAC,GAAKN,SAAS,CAACK,OAAO,CAAC+D,WAAW,CAACzC,CAAC,CAAC,CAACrB,IAAI,CAAC,CAAG,CAAC,CAAE,CAC3F,MAAO,MAAK,CAChB,CACJ,CACA,MAAO,KAAI,CACf,CAEA;AACA,MAAO,SAAS,CAAA+D,eAAeA,CAACzB,KAAK,CAAE,CACnC,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CACjE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC,KAAM,CAAAuD,WAAW,CAAGtE,SAAS,CAACmD,QAAQ,CAAC,CACvC,KAAM,CAAAjD,SAAS,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,IAAI,CAAE,MAAM,CAAE,OAAO,CAAE,MAAM,CAAE,KAAK,CAAC,CAEhG;AACA,IAAK,GAAI,CAAA2B,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGyC,WAAW,CAACvD,MAAM,CAAEc,CAAC,EAAE,CAAE,CACzC,GAAIhB,YAAY,CAACyD,WAAW,CAACzC,CAAC,CAAC,CAACrB,IAAI,CAAC,GAAKK,YAAY,CAACX,SAAS,CAAC2B,CAAC,CAAC,CAAC,CAAE,CAClE,MAAO,MAAK,CAChB,CACJ,CAEA;AACA,KAAM,CAAA2C,KAAK,CAAG,GAAI,CAAAC,GAAG,CAACtB,QAAQ,CAAC3B,GAAG,CAACZ,IAAI,EAAIA,IAAI,CAACoB,IAAI,CAAC,CAAC,CACtD,MAAO,CAAAwC,KAAK,CAACE,IAAI,GAAK,EAAE,CAAE;AAC1B;AACA;AACC,KAAM,CAAAC,UAAU,CAAG,CAAC,CAAC,CACrB,IAAI,KAAM,CAAA/D,IAAI,GAAI,CAAAuC,QAAQ,CAAE,CACxBwB,UAAU,CAAC/D,IAAI,CAACJ,IAAI,CAAC,CAAG,CAACmE,UAAU,CAAC/D,IAAI,CAACJ,IAAI,CAAC,EAAI,CAAC,EAAI,CAAC,CAC5D,CACA,MAAO,CAAAS,MAAM,CAACC,MAAM,CAACyD,UAAU,CAAC,CAACb,KAAK,CAAC1C,KAAK,EAAIA,KAAK,GAAK,CAAC,CAAC,EAAIiD,QAAQ,CAACvB,KAAK,CAAC,CAAE;AACtF,CAEA;AACA,MAAO,SAAS,CAAA8B,cAAcA,CAAC9B,KAAK,CAAE,CAClC,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CACjE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC,KAAM,CAAA8D,UAAU,CAAG,CAAC,MAAM,CAAE,OAAO,CAAE,MAAM,CAAE,KAAK,CAAC,CAAE;AACrD,KAAM,CAAAC,UAAU,CAAG3B,QAAQ,CAAChB,MAAM,CAACvB,IAAI,EAAIiE,UAAU,CAACT,QAAQ,CAACxD,IAAI,CAACJ,IAAI,CAAC,CAAC,CAE1E,MAAO,CAAAsE,UAAU,CAAC/D,MAAM,GAAK,EAAE,CAAE;AACrC,CAEA;AACA,MAAO,SAAS,CAAAgE,YAAYA,CAACjC,KAAK,CAAE,CAChC,MAAO,CAAAA,KAAK,CAACC,KAAK,CAAChC,MAAM,GAAK,CAAC,EAAI+B,KAAK,CAACE,MAAM,CAACjC,MAAM,GAAK,CAAC,EAAI+B,KAAK,CAACG,IAAI,CAAClC,MAAM,GAAK,CAAC,EAChFe,OAAO,CAACgB,KAAK,CAACC,KAAK,CAAC,EAAIjB,OAAO,CAACgB,KAAK,CAACE,MAAM,CAAC,EAAIlB,OAAO,CAACgB,KAAK,CAACG,IAAI,CAAC,CAC/E,CAEA;AACA,MAAO,SAAS,CAAA+B,eAAeA,CAAClC,KAAK,CAAE,CACnC,MAAO,CAAAA,KAAK,CAACC,KAAK,CAAChC,MAAM,GAAK,CAAC,EAAI+B,KAAK,CAACE,MAAM,CAACjC,MAAM,GAAK,CAAC,EAAI+B,KAAK,CAACG,IAAI,CAAClC,MAAM,GAAK,CAAC,EAChFM,UAAU,CAACyB,KAAK,CAACC,KAAK,CAAC,EAAI1B,UAAU,CAACyB,KAAK,CAACE,MAAM,CAAC,EAAI3B,UAAU,CAACyB,KAAK,CAACG,IAAI,CAAC,CACxF,CAEA;AACA,MAAO,SAAS,CAAAgC,eAAeA,CAACnC,KAAK,CAAE,CACnC,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,KAAK,CAACC,KAAK,CAAE,GAAGD,KAAK,CAACE,MAAM,CAAE,GAAGF,KAAK,CAACG,IAAI,CAAC,CACjE,GAAIE,QAAQ,CAACpC,MAAM,GAAK,EAAE,CAAE,MAAO,MAAK,CAExC;AACA,GAAIwD,eAAe,CAACzB,KAAK,CAAC,CAAE,MAAO,KAAI,CAAE;AACzC,GAAID,oBAAoB,CAACC,KAAK,CAAC,CAAE,MAAO,KAAI,CAC5C,GAAII,kBAAkB,CAACJ,KAAK,CAAC,CAAE,MAAO,KAAI,CAC1C,GAAIQ,kBAAkB,CAACR,KAAK,CAAC,CAAE,MAAO,KAAI,CAC1C,GAAIU,oBAAoB,CAACV,KAAK,CAAC,CAAE,MAAO,KAAI,CAC5C,GAAIY,0BAA0B,CAACZ,KAAK,CAAC,CAAE,MAAO,KAAI,CAClD,GAAIc,YAAY,CAACd,KAAK,CAAC,CAAE,MAAO,KAAI,CACpC,GAAIkB,QAAQ,CAAClB,KAAK,CAAC,CAAE,MAAO,KAAI,CAChC,GAAIoB,UAAU,CAACpB,KAAK,CAAC,CAAE,MAAO,KAAI,CAClC,GAAIuB,QAAQ,CAACvB,KAAK,CAAC,CAAE,MAAO,KAAI,CAAE;AAClC,GAAI8B,cAAc,CAAC9B,KAAK,CAAC,CAAE,MAAO,KAAI,CAAE;AACvC,GAAIiC,YAAY,CAACjC,KAAK,CAAC,CAAE,MAAO,KAAI,CAAE;AACtC,GAAIkC,eAAe,CAAClC,KAAK,CAAC,CAAE,MAAO,KAAI,CAAE;AAC1C;AAEA,MAAO,MAAK,CAChB,CAEA;AACA,QAAS,CAAAoC,wBAAwBA,CAACpC,KAAK,CAAE,CACpC;AACD,GAAIyB,eAAe,CAACzB,KAAK,CAAC,CAAE,MAAO,GAAE,CAAE;AACvC,GAAID,oBAAoB,CAACC,KAAK,CAAC,CAAE,MAAO,GAAE,CAC1C,GAAII,kBAAkB,CAACJ,KAAK,CAAC,CAAE,MAAO,GAAE,CACxC,GAAIQ,kBAAkB,CAACR,KAAK,CAAC,CAAE,MAAO,GAAE,CACxC,GAAIU,oBAAoB,CAACV,KAAK,CAAC,CAAE,MAAO,EAAC,CACzC,GAAIY,0BAA0B,CAACZ,KAAK,CAAC,CAAE,MAAO,EAAC,CAC/C,GAAIc,YAAY,CAACd,KAAK,CAAC,CAAE,MAAO,EAAC,CACjC,GAAIkB,QAAQ,CAAClB,KAAK,CAAC,CAAE,MAAO,EAAC,CAC7B,GAAIoB,UAAU,CAACpB,KAAK,CAAC,CAAE,MAAO,EAAC,CAC/B,GAAIuB,QAAQ,CAACvB,KAAK,CAAC,CAAE,MAAO,GAAE,CAC9B,GAAI8B,cAAc,CAAC9B,KAAK,CAAC,CAAE,MAAO,GAAE,CAAE;AACtC,GAAIiC,YAAY,CAACjC,KAAK,CAAC,CAAE,MAAO,EAAC,CAAE;AACnC,GAAIkC,eAAe,CAAClC,KAAK,CAAC,CAAE,MAAO,EAAC,CAAE;AAEtC,MAAO,EAAC,CACZ,CAEA;AACA;AACA;AACA;AACA,MAAO,SAAS,CAAAqC,cAAcA,CAACC,YAAY,CAAEC,YAAY,CAAE,CACvD,GAAI,CAAAC,KAAK,CAAG,CAAC,CAEb;AACA,KAAM,CAAAC,wBAAwB,CAAGL,wBAAwB,CAACE,YAAY,CAAC,CACvE,KAAM,CAAAI,wBAAwB,CAAGN,wBAAwB,CAACG,YAAY,CAAC,CAEvE,GAAIE,wBAAwB,CAAG,CAAC,EAAIC,wBAAwB,CAAG,CAAC,CAAE,CAC9D,GAAID,wBAAwB,CAAGC,wBAAwB,CAAE,CACrD,MAAO,CAAAD,wBAAwB,CACnC,CAAC,IAAM,IAAIC,wBAAwB,CAAGD,wBAAwB,CAAE,CAC5D,MAAO,CAACC,wBAAwB,CACpC,CAAC,IAAM,CACH;AACA,MAAO,EAAC,CACZ,CACJ,CAEA;AACA,KAAM,CAAAC,eAAe,CAAGC,YAAY,CAACN,YAAY,CAACrC,KAAK,CAAEsC,YAAY,CAACtC,KAAK,CAAC,CAC5E,GAAI0C,eAAe,CAAG,CAAC,CAAE,CACrBH,KAAK,EAAI,CAAC,CACd,CAAC,IAAM,IAAIG,eAAe,CAAG,CAAC,CAAE,CAC5BH,KAAK,EAAI,CAAC,CACd,CAEA,KAAM,CAAAK,gBAAgB,CAAGD,YAAY,CAACN,YAAY,CAACpC,MAAM,CAAEqC,YAAY,CAACrC,MAAM,CAAC,CAC/E,GAAI2C,gBAAgB,CAAG,CAAC,CAAE,CACtBL,KAAK,EAAI,CAAC,CACd,CAAC,IAAM,IAAIK,gBAAgB,CAAG,CAAC,CAAE,CAC7BL,KAAK,EAAI,CAAC,CACd,CAEA,KAAM,CAAAM,cAAc,CAAGF,YAAY,CAACN,YAAY,CAACnC,IAAI,CAAEoC,YAAY,CAACpC,IAAI,CAAC,CACzE,GAAI2C,cAAc,CAAG,CAAC,CAAE,CACpBN,KAAK,EAAI,CAAC,CACd,CAAC,IAAM,IAAIM,cAAc,CAAG,CAAC,CAAE,CAC3BN,KAAK,EAAI,CAAC,CACd,CAEA,MAAO,CAAAA,KAAK,CAChB,CAEA;AACA,MAAO,SAAS,CAAAO,QAAQA,CAAC5F,KAAK,CAAE,CAC5B,KAAM,CAAAqE,WAAW,CAAGtE,SAAS,CAACC,KAAK,CAAC,CACpC,GAAI,CAAA6F,cAAc,CAAG,CAAC,GAAGxB,WAAW,CAAC,CAErC,KAAM,CAAAvB,KAAK,CAAG,EAAE,CAChB,KAAM,CAAAC,MAAM,CAAG,EAAE,CACjB,KAAM,CAAAC,IAAI,CAAG,EAAE,CAEf;AAEA;AACA,GAAI,CAAA8C,SAAS,CAAG,KAAK,CACrB,IAAK,GAAI,CAAAlE,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIiE,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAEc,CAAC,EAAE,CAAE,CACjD,KAAM,CAAAmE,aAAa,CAAGF,cAAc,CAAC3F,KAAK,CAAC0B,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAC,CACpD,GAAIW,eAAe,CAACwD,aAAa,CAAC,CAAE,CAChC/C,IAAI,CAACgD,IAAI,CAAC,GAAGD,aAAa,CAAC,CAC3BF,cAAc,CAACI,MAAM,CAACrE,CAAC,CAAE,CAAC,CAAC,CAC3BkE,SAAS,CAAG,IAAI,CAChB,MACJ,CACJ,CAEA;AACC,GAAI,CAACA,SAAS,CAAE,CACZ,IAAK,GAAI,CAAAlE,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIiE,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAEc,CAAC,EAAE,CAAE,CAClD,KAAM,CAAAmE,aAAa,CAAGF,cAAc,CAAC3F,KAAK,CAAC0B,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAC,CACpD,GAAIU,aAAa,CAACyD,aAAa,CAAC,CAAE,CAC9B/C,IAAI,CAACgD,IAAI,CAAC,GAAGD,aAAa,CAAC,CAC3BF,cAAc,CAACI,MAAM,CAACrE,CAAC,CAAE,CAAC,CAAC,CAC3BkE,SAAS,CAAG,IAAI,CAChB,MACJ,CACJ,CACH,CAED;AACA,GAAI,CAAAI,WAAW,CAAG,KAAK,CACvB,IAAK,GAAI,CAAAtE,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIiE,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAEc,CAAC,EAAE,CAAE,CACjD,KAAM,CAAAmE,aAAa,CAAGF,cAAc,CAAC3F,KAAK,CAAC0B,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAC,CACpD,GAAIO,WAAW,CAAC4D,aAAa,CAAC,CAAE,CAC5BhD,MAAM,CAACiD,IAAI,CAAC,GAAGD,aAAa,CAAC,CAC7BF,cAAc,CAACI,MAAM,CAACrE,CAAC,CAAE,CAAC,CAAC,CAC3BsE,WAAW,CAAG,IAAI,CAClB,MACJ,CACJ,CAEA;AACC,GAAI,CAACJ,SAAS,CAAE,CACb,IAAK,GAAI,CAAAlE,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIiE,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAEc,CAAC,EAAE,CAAE,CACjD,KAAM,CAAAmE,aAAa,CAAGF,cAAc,CAAC3F,KAAK,CAAC0B,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAC,CACpD,GAAIC,OAAO,CAACkE,aAAa,CAAC,CAAE,CACxB/C,IAAI,CAACgD,IAAI,CAAC,GAAGD,aAAa,CAAC,CAC3BF,cAAc,CAACI,MAAM,CAACrE,CAAC,CAAE,CAAC,CAAC,CAC3BkE,SAAS,CAAG,IAAI,CAChB,MACJ,CACJ,CACH,CAED;AACA,GAAI,CAACI,WAAW,CAAE,CACb,IAAK,GAAI,CAAAtE,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIiE,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAEc,CAAC,EAAE,CAAE,CAClD,KAAM,CAAAmE,aAAa,CAAGF,cAAc,CAAC3F,KAAK,CAAC0B,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAC,CACpD,GAAIR,UAAU,CAAC2E,aAAa,CAAC,CAAE,CAC3BhD,MAAM,CAACiD,IAAI,CAAC,GAAGD,aAAa,CAAC,CAC7BF,cAAc,CAACI,MAAM,CAACrE,CAAC,CAAE,CAAC,CAAC,CAC3BsE,WAAW,CAAG,IAAI,CAClB,MACJ,CACJ,CACJ,CAEA;AACA,GAAI,CAAAC,UAAU,CAAG,KAAK,CACtB,IAAK,GAAI,CAAAvE,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIiE,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAEc,CAAC,EAAE,CAAE,CACjD,KAAM,CAAAmE,aAAa,CAAGF,cAAc,CAAC3F,KAAK,CAAC0B,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAC,CACpD,GAAIb,cAAc,CAACgF,aAAa,CAAC,CAAE,CAC/BjD,KAAK,CAACkD,IAAI,CAAC,GAAGD,aAAa,CAAC,CAC5BF,cAAc,CAACI,MAAM,CAACrE,CAAC,CAAE,CAAC,CAAC,CAC3BuE,UAAU,CAAG,IAAI,CACjB,MACJ,CACJ,CAEC;AACA,GAAI,CAACA,UAAU,EAAIN,cAAc,CAAC/E,MAAM,EAAI,CAAC,CAAE,CAC3C;AACA,IAAI,GAAI,CAAAc,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIiE,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAEc,CAAC,EAAE,CAAE,CAChD,KAAM,CAAAwE,aAAa,CAAGP,cAAc,CAAC3F,KAAK,CAAC0B,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAC,CACpD,GAAIf,MAAM,CAACuF,aAAa,CAAC,CAAE,CACvBtD,KAAK,CAACkD,IAAI,CAAC,GAAGI,aAAa,CAAC,CAC5BP,cAAc,CAACI,MAAM,CAACrE,CAAC,CAAE,CAAC,CAAC,CAC3BuE,UAAU,CAAG,IAAI,CACjB,MACJ,CACJ,CACC;AACA,GAAIA,UAAU,EAAIN,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAE,CACzCgC,KAAK,CAACkD,IAAI,CAACH,cAAc,CAACQ,GAAG,CAAC,CAAC,CAAC,CACpC,CACL,CAED;AACA,MAAOrD,IAAI,CAAClC,MAAM,CAAG,CAAC,EAAI+E,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAE,CACjDkC,IAAI,CAACgD,IAAI,CAACH,cAAc,CAACQ,GAAG,CAAC,CAAC,CAAC,CACnC,CACA,MAAOtD,MAAM,CAACjC,MAAM,CAAG,CAAC,EAAI+E,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAE,CACnDiC,MAAM,CAACiD,IAAI,CAACH,cAAc,CAACQ,GAAG,CAAC,CAAC,CAAC,CACrC,CACA,MAAOvD,KAAK,CAAChC,MAAM,CAAG,CAAC,EAAI+E,cAAc,CAAC/E,MAAM,CAAG,CAAC,CAAE,CACjDgC,KAAK,CAACkD,IAAI,CAACH,cAAc,CAACQ,GAAG,CAAC,CAAC,CAAC,CACrC,CAEA;AACC,GAAIvD,KAAK,CAAChC,MAAM,GAAK,CAAC,EAAIiC,MAAM,CAACjC,MAAM,GAAK,CAAC,EAAIkC,IAAI,CAAClC,MAAM,GAAK,CAAC,CAAE,CAChE,KAAM,CAAAwF,gBAAgB,CAAGC,WAAW,CAACvG,KAAK,CAAC,CAC3C,MAAO,CACH8C,KAAK,CAAEwD,gBAAgB,CAACpG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAClC6C,MAAM,CAAEuD,gBAAgB,CAACpG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CACnC8C,IAAI,CAAEsD,gBAAgB,CAACpG,KAAK,CAAC,CAAC,CAAC,EAAE,CACrC,CAAC,CACL,CAED,MAAO,CAAE4C,KAAK,CAAEC,MAAM,CAAEC,IAAK,CAAC,CAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}