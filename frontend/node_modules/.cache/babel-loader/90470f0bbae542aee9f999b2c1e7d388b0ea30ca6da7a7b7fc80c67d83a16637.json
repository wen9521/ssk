{"ast":null,"code":"// src/game-logic/deck.js\nconst SUITS=['s','h','d','c'];const RANKS=['2','3','4','5','6','7','8','9','T','J','Q','K','A'];/**\n * Creates a standard 52-card deck.\n * @returns {string[]} An array of card strings, e.g., ['2s', '3s', ...].\n */function createDeck(){const deck=[];for(const suit of SUITS){for(const rank of RANKS){// Using a consistent format: Rank then Suit (e.g., 'As', 'Th', '2c')\ndeck.push(rank+suit);}}return deck;}/**\n * Shuffles a deck of cards using the Fisher-Yates algorithm.\n * @param {string[]} deck The deck to shuffle.\n * @returns {string[]} A new array containing the shuffled deck.\n */function shuffleDeck(deck){// Create a copy to avoid modifying the original array\nconst shuffled=[...deck];for(let i=shuffled.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[shuffled[i],shuffled[j]]=[shuffled[j],shuffled[i]];}return shuffled;}// Export the functions so they can be imported elsewhere\nexport{createDeck,shuffleDeck};","map":{"version":3,"names":["SUITS","RANKS","createDeck","deck","suit","rank","push","shuffleDeck","shuffled","i","length","j","Math","floor","random"],"sources":["/home/user/ssk/frontend/src/game-logic/deck.js"],"sourcesContent":["// src/game-logic/deck.js\n\nconst SUITS = ['s', 'h', 'd', 'c'];\nconst RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n\n/**\n * Creates a standard 52-card deck.\n * @returns {string[]} An array of card strings, e.g., ['2s', '3s', ...].\n */\nfunction createDeck() {\n  const deck = [];\n  for (const suit of SUITS) {\n    for (const rank of RANKS) {\n      // Using a consistent format: Rank then Suit (e.g., 'As', 'Th', '2c')\n      deck.push(rank + suit);\n    }\n  }\n  return deck;\n}\n\n/**\n * Shuffles a deck of cards using the Fisher-Yates algorithm.\n * @param {string[]} deck The deck to shuffle.\n * @returns {string[]} A new array containing the shuffled deck.\n */\nfunction shuffleDeck(deck) {\n  // Create a copy to avoid modifying the original array\n  const shuffled = [...deck];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}\n\n// Export the functions so they can be imported elsewhere\nexport { createDeck, shuffleDeck };\n"],"mappings":"AAAA;AAEA,KAAM,CAAAA,KAAK,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,CAClC,KAAM,CAAAC,KAAK,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,CAE/E;AACA;AACA;AACA,GACA,QAAS,CAAAC,UAAUA,CAAA,CAAG,CACpB,KAAM,CAAAC,IAAI,CAAG,EAAE,CACf,IAAK,KAAM,CAAAC,IAAI,GAAI,CAAAJ,KAAK,CAAE,CACxB,IAAK,KAAM,CAAAK,IAAI,GAAI,CAAAJ,KAAK,CAAE,CACxB;AACAE,IAAI,CAACG,IAAI,CAACD,IAAI,CAAGD,IAAI,CAAC,CACxB,CACF,CACA,MAAO,CAAAD,IAAI,CACb,CAEA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAI,WAAWA,CAACJ,IAAI,CAAE,CACzB;AACA,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGL,IAAI,CAAC,CAC1B,IAAK,GAAI,CAAAM,CAAC,CAAGD,QAAQ,CAACE,MAAM,CAAG,CAAC,CAAED,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC5C,KAAM,CAAAE,CAAC,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,EAAIL,CAAC,CAAG,CAAC,CAAC,CAAC,CAC7C,CAACD,QAAQ,CAACC,CAAC,CAAC,CAAED,QAAQ,CAACG,CAAC,CAAC,CAAC,CAAG,CAACH,QAAQ,CAACG,CAAC,CAAC,CAAEH,QAAQ,CAACC,CAAC,CAAC,CAAC,CACzD,CACA,MAAO,CAAAD,QAAQ,CACjB,CAEA;AACA,OAASN,UAAU,CAAEK,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}